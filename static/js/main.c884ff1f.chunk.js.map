{"version":3,"sources":["components/Navbar/MenuList.js","components/Navbar/MobileMenu.js","images/nsgLogoSnipped.png","components/Navbar/Navbar.js","pages/WelcomePage.js","pages/TicTacToeRules.js","pages/FifteenRules.js","logic/GameLogic.js","logic/BoardLogic.js","components/Boards/Square.js","components/Boards/TicTacToeBoard.js","components/Boards/FifteenBoard.js","components/Panels/Parts/StatusHeader.js","components/Panels/Parts/GameNumber.js","components/Panels/Parts/TicTacToeRecord.js","components/Panels/Parts/FifteenRecord.js","components/Buttons/NewGameButton.js","components/Buttons/UndoButton.js","components/Panels/HumanPanel.js","pages/PlayVsHuman.js","logic/BotLogic.js","components/Buttons/DifficultyModeButtons.js","components/Buttons/BotGoFirstButton.js","components/Panels/BotPanel.js","pages/PlayVsBot.js","components/Panels/Parts/CoachsCommentary.js","components/Buttons/ShowHintsButton.js","components/Panels/CoachPanel.js","pages/PlayWithCoach.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","list","width","backgroundColor","listItem","color","palette","common","white","icon","alignContent","justifyContent","MenuList","classes","Fragment","ListItem","button","component","RouterLink","to","Icon","className","root","ListItemText","primary","primaryTypographyProps","variant","Divider","ListSubheader","Box","p","Typography","gutterBottom","pathname","menu","main","height","display","alignItems","drawer","minWidth","fontSize","MobileMenu","anchor","React","useState","open","state","setState","toggleDrawer","event","type","key","Button","onClick","Drawer","paper","onClose","role","onKeyDown","List","navbar","zIndex","logo","backgroundImage","backgroundPosition","backgroundRepeat","backgroundSize","pageTitle","flex","Navbar","props","Container","maxWidth","disableGutters","align","noWrap","flexBasis","textAlign","WelcomePage","AppBar","position","paragraph","mb","Grid","container","spacing","item","xs","sm","href","minHeight","flexDirection","padding","FifteenRulesPage","trioList","i","j","k","complementOf","newTrio","push","generateTrioList","sumOfTwo","listOfPossiblePositions","positionsList","parentLength","childPositions","map","parent","getChildren","flat","getListOfPossiblePositions","outcomeMap","Map","length","positions","ml","set","outcome","generatePositionToOutcomeMap","status","xHasWon","oHasWon","nextPlayer","gameOver","gameHasBeenWon","sumsOfThree","xNumbers","includes","oNumbers","finalOutcome","childrensOutcomes","child","get","predictedOutcome","moveListStringToArray","filter","move","turn","Array","from","e","Number","children","availableNumbers","getValidMoves","forEach","Set","delete","parseInt","charAt","intersect","listOne","listTwo","moveSet","sums","sum","sumsOfTwo","highlightWins","colors","fill","Xs","Os","trio","numbersInWin","num","getBoardHints","toString","gameStatus","console","error","getHintColor","log","square","iconX","black","iconO","noColor","win","draw","lose","Square","squareIcon","squareColorClassName","claimed","unclaimed","Paper","number","elevation","handleBoardClick","board","row","Board","moveList","boardIcons","data","squareId","getBoardIcons","boardColors","showHints","getBoardColors","squares","newSquare","slice","margin","card","playerOne","text","playerTwo","FifteenBoard","claims","getClaims","wins","getWins","numCards","newNumCard","Card","claim","border","cardStatusClassName","borderRadius","StatusHeader","game","statusMessage","gameNumber","record","TicTacToeRecord","playMode","humanGoesFirst","recordRow","colorTileOne","colorTileTwo","ColorTile","player","FifteenRecord","playerOneName","playerTwoName","playerOneSymbol","playerTwoSymbol","NewGameButton","handleNewGameClick","disabled","mr","UndoButton","handleUndoClick","panel","infoArea","controls","HumanPanel","s","navbarArea","boardArea","panelArea","PlayVsHuman","setMoveList","setGameNumber","setRecord","assert","shortenedMoveList","nextGameNumber","numberClicked","updatedMoveList","concat","mls","handleGameOver","winningMoves","complements","urgentDefensiveMoves","selectMoveRandomly","Math","floor","random","selectedButton","unselectedButton","DifficultyModeButtons","easyButton","difficultyMode","handleDifficultyModeChange","mediumButton","hardButton","handleBotGoFirstClick","BotPanel","PlayVsBot","setHumanGoesFirst","setDifficultyMode","handleBotsTurn","newDifficulty","warn","result","botMove","getBotMove","setTimeout","easyProtocol","mediumProtocol","hardProtocol","defensiveMoves","time","sorted","humanPlaysX","winningForBot","drawing","winningForHuman","newPosition","sortBotMoves","commetaryBox","CoachsCommentary","commentLabel","next","prev","comment","getCommentary","ShowHintsButton","toggleShowHints","buttonArea","CoachPanel","currentStatus","currentOutcome","previousOutcome","label","doubleAttackingMoves","getCommentLabel","overflowY","paddingTop","PlayWithCoach","setmoveList","setShowHints","squareClicked","createTheme","light","dark","contrastText","secondary","action","disabledBackground","disabledOpacity","typography","h4","lineHeight","h5","danger","shape","responsiveFontSizes","overflowX","App","CssBaseline","ThemeProvider","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c884ff1f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// React ROUTER\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n// MATERIAL-UI COMPONENTS\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\n\r\n\r\n// ICONS \r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    list: {\r\n        width: 'inherit',\r\n        // backgroundColor: theme.palette.primary.dark\r\n        backgroundColor: 'inherit'\r\n\r\n    },\r\n    listItem: {\r\n        color: theme.palette.common.white,\r\n    },\r\n    icon: {\r\n        width: '45px',\r\n        color: theme.palette.common.white,\r\n        alignContent: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n}));\r\n\r\n\r\n\r\nexport default function MenuList() {\r\n    const classes = useStyles();\r\n    \r\n    return (\r\n        \r\n        <React.Fragment >\r\n\r\n            <ListItem\r\n                key={'welcome'}\r\n                button\r\n                component={RouterLink}\r\n                to='/'\r\n            >\r\n                <Icon className={\"fas fa-home fa-2x\"}\r\n                    classes={{ root: classes.icon }}\r\n                />\r\n                <ListItemText\r\n                    primary={'Welcome'}\r\n                    primaryTypographyProps={{ variant: 'h5' }}\r\n                />\r\n            </ListItem>\r\n\r\n            <Divider />\r\n\r\n\r\n            <ListSubheader >\r\n                <Box p={2} />\r\n                <Typography variant='h4' color=\"textPrimary\" gutterBottom  >\r\n                    Tic Tac Toe\r\n                </Typography>\r\n            </ListSubheader>\r\n\r\n\r\n            <ListItem\r\n                key={'rule'}\r\n                button\r\n                component={RouterLink}\r\n                to={{\r\n                    pathname: '/tic_tac_toe_rules',\r\n                }}\r\n            >\r\n                <Icon className={\"fas fa-question fa-2x\"}\r\n                    classes={{ root: classes.icon }}\r\n                />\r\n                <ListItemText\r\n                    primary={'How To Play'}\r\n                    primaryTypographyProps={{ variant: 'h5' }}\r\n                />\r\n            </ListItem>\r\n\r\n            <ListItem\r\n                key={'play_vs_human'}\r\n                button\r\n                component={RouterLink}\r\n                to={{\r\n                    pathname: '/play_vs_human',\r\n                }}\r\n            >\r\n                <Icon className={\"fas fa-user-friends fa-2x\"}\r\n                    classes={{ root: classes.icon }}\r\n                />\r\n                <ListItemText\r\n                    primary={'Play vs. Human'}\r\n                    primaryTypographyProps={{ variant: 'h5' }}\r\n                />\r\n            </ListItem>\r\n\r\n            <ListItem\r\n                key={'play_vs_bot'}\r\n                button\r\n                component={RouterLink}\r\n                to={{\r\n                    pathname: '/play_vs_bot',\r\n                }}\r\n            >\r\n                <Icon className={\"fas fa-robot fa-2x\"}\r\n                    classes={{ root: classes.icon }}\r\n                />\r\n                <ListItemText\r\n                    primary={'Play vs. Bot'}\r\n                    primaryTypographyProps={{ variant: 'h5' }}\r\n                />\r\n            </ListItem>\r\n\r\n            <ListItem\r\n                key={'play_with_coach'}\r\n                button\r\n                component={RouterLink}\r\n                to={{\r\n                    pathname: '/play_with_coach',\r\n                }}\r\n            >\r\n                <Icon className={\"fas fa-graduation-cap fa-2x\"}\r\n                    classes={{ root: classes.icon }}\r\n                />\r\n                <ListItemText\r\n                    primary={'Play with Coach'}\r\n                    primaryTypographyProps={{ variant: 'h5' }}\r\n                />\r\n            </ListItem>\r\n\r\n\r\n            <Divider />\r\n\r\n\r\n            <ListSubheader  >\r\n                <Box p={2} />\r\n                <Typography variant='h4' color=\"textPrimary\" gutterBottom >\r\n                    The Fifteen Game\r\n                </Typography>\r\n            </ListSubheader>\r\n\r\n            <ListItem\r\n                key={'fifteen_rules'}\r\n                button\r\n                component={RouterLink}\r\n                to={{\r\n                    pathname: '/fifteen_rules',\r\n                }}\r\n            >\r\n                <Icon className={\"fas fa-question fa-2x\"}\r\n                    classes={{ root: classes.icon }}\r\n                />\r\n                <ListItemText\r\n                    primary={'How To Play'}\r\n                    primaryTypographyProps={{ variant: 'h5' }}\r\n                />\r\n            </ListItem>\r\n            \r\n            <ListItem\r\n                key={'fifteen_vs_human'}\r\n                button\r\n                component={RouterLink}\r\n                to={{\r\n                    pathname: '/fifteen_vs_human',\r\n                }}\r\n            >\r\n                <Icon className={\"fas fa-user-friends fa-2x\"}\r\n                    classes={{ root: classes.icon }}\r\n                />\r\n                <ListItemText\r\n                    primary={'Play vs. Human'}\r\n                    primaryTypographyProps={{ variant: 'h5' }}\r\n                />\r\n            </ListItem>\r\n\r\n            <ListItem\r\n                key={'fifteen_vs_bot'}\r\n                button\r\n                component={RouterLink}\r\n                to={{\r\n                    pathname: '/fifteen_vs_bot',\r\n                }}\r\n            >\r\n                <Icon className={\"fas fa-robot fa-2x\"}\r\n                    classes={{ root: classes.icon }}\r\n                />\r\n                <ListItemText\r\n                    primary={'Play vs. Bot'}\r\n                    primaryTypographyProps={{ variant: 'h5' }}\r\n                />\r\n            </ListItem>\r\n\r\n            <ListItem\r\n                key={'learn_about_magic_squares'}\r\n                button\r\n                component={RouterLink}\r\n                to={{\r\n                    pathname: '/learn_about_magic_squares',\r\n                }}\r\n            >\r\n                <Icon className={\"fas fa-graduation-cap fa-2x\"}\r\n                    classes={{ root: classes.icon }}\r\n                />\r\n                <ListItemText\r\n                    primary={'Magic Squares'}\r\n                    primaryTypographyProps={{ variant: 'h5' }}\r\n                />\r\n            </ListItem>\r\n            \r\n\r\n        </React.Fragment>\r\n    );\r\n}","import React from 'react';\r\n\r\n// MY components\r\nimport MenuList from \"./MenuList\";\r\n\r\n// MATERIAL-UI COMPONENTS\r\nimport Box from '@material-ui/core/Box';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\n\r\n// ICONS\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles(theme => ({\r\n    menu: {\r\n        // border: 'solid red 1px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        height: '100%',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end'\r\n    },\r\n    button: {\r\n    },\r\n    drawer: {\r\n        height: 'auto',\r\n    },\r\n    list: {\r\n        width: 'auto',\r\n        minWidth: '300px',\r\n        fontSize: '0.8rem',\r\n        backgroundColor: theme.palette.primary.main,\r\n        height: '100%'\r\n    },\r\n}));\r\n\r\nexport default function MobileMenu() {\r\n    const classes = useStyles();\r\n    const [state, setState] = React.useState({\r\n        open: false,\r\n    });\r\n\r\n    const toggleDrawer = (anchor, open) => (event) => {\r\n        if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n            return;\r\n        }\r\n        setState({ ...state, [anchor]: open });\r\n    };\r\n\r\n    const list = (anchor) => (\r\n        <Box className={classes.list}\r\n            role=\"presentation\"\r\n            onClick={toggleDrawer(anchor, false)}\r\n            onKeyDown={toggleDrawer(anchor, false)}\r\n        >\r\n            <List>\r\n                <MenuList />\r\n            </List>\r\n        </Box>\r\n    );\r\n\r\n    return (\r\n        <Box className={classes.menu} >\r\n            <Button \r\n                className={classes.button}\r\n                onClick={toggleDrawer('open', true)}\r\n                aria-controls=\"simple-menu\"\r\n                aria-haspopup=\"true\"\r\n            >\r\n                <MenuIcon fontSize='large' />\r\n            </Button>   \r\n            <Drawer \r\n                className={classes.drawer}\r\n                classes={{ paper: 'paper'}}\r\n                anchor={'right'} \r\n                open={state['open']} \r\n                onClose={toggleDrawer('open', false)}\r\n                onClick={toggleDrawer('open', false)}\r\n            >\r\n                    {list('right')}\r\n            </Drawer>\r\n        </Box>\r\n    );\r\n}","export default __webpack_public_path__ + \"static/media/nsgLogoSnipped.2721c635.png\";","import React from 'react';\r\n\r\n// MY COMPONENTS\r\nimport MobileMenu from \"./MobileMenu\";\r\n// import SpacerBox from \"./SpacerBox\";\r\n\r\n// Image Imports\r\nimport logo from \"../../images/nsgLogoSnipped.png\";\r\n\r\n\r\n// MATERIAL-UI COMPONENTS\r\nimport Container from '@material-ui/core/Container';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n// const heightInRem = 3.6;\r\n// const height = `${heightInRem}rem`;\r\n// const halfHeight = `${heightInRem/2}rem`;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    navbar: {\r\n        width: '100vw',\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: theme.palette.common.white,\r\n        zIndex: '1200',\r\n        display: 'flex',\r\n        alignItems: 'flex-end',\r\n        // alignItems: 'stretch',\r\n    },\r\n    logo: {\r\n        width: '10%',\r\n        backgroundImage: `\r\n            url(${logo})  \r\n        `,\r\n        backgroundPosition: 'left bottom',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: 'auto 95%',\r\n    },\r\n    pageTitle: {\r\n        display: 'flex',\r\n        flex: '1 0 70%',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    }\r\n}));\r\n\r\nexport default function Navbar(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Box className={classes.navbar} >\r\n            <Container maxWidth='md' disableGutters height='inherit' >\r\n                <Box display='flex' justifyContent='center' >\r\n                    <Box className={classes.logo}  />\r\n                    <Box className={classes.pageTitle} >\r\n                        <Typography align='center' variant='h4' noWrap >\r\n                            {props.pageTitle}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box display='flex' flexBasis='10%' justifyContent='flex-end' >\r\n                        <MobileMenu />\r\n                    </Box>\r\n                </Box>\r\n                \r\n            </Container>\r\n        </Box>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nimport {\r\n    Link as RouterLink,\r\n} from \"react-router-dom\";\r\n\r\n// My Components\r\nimport Navbar from \"../components/Navbar/Navbar\"\r\n\r\n// MUI  components\r\nimport Box from '@material-ui/core/Box';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography'\r\nimport AppBar from '@material-ui/core/AppBar'\r\n\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        textAlign: 'center',\r\n        width: '95%',\r\n    }, \r\n}));\r\n\r\nexport default function WelcomePage() {\r\n    const classes = useStyles();\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <AppBar position='sticky' >\r\n                <Navbar pageTitle={\"Welcome\"} />\r\n            </AppBar>\r\n            <Container maxWidth='md' >\r\n                <Box p={2} />\r\n                <Typography align='center' color='textPrimary' component='h1' variant='h3' gutterBottom >\r\n                    A Math Lesson in Disguise\r\n                </Typography>\r\n                <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n                    Mathematical thinking has a playful side. \r\n                    In fact, there are whole branches of study known as \"game theory\" and \"recreational mathematics\". \r\n                    Sadly, this side of mathematics has been excluded from many primary and secondary school curriculums by folks who\r\n                     think we don't have enough time in the school day to teach anything but the \"fundamentals\".\r\n                    The result of this approach is that many kids give up on learning math before they get to \"the good part\". \r\n               </Typography>\r\n                <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n                    This project seeks to counteract that trend by using two simple strategy games to introduce two of the most important concepts in math.\r\n                    One of these games is likely familiar to you, the other is probably not. \r\n                    They both have a surprising amount to teach, if you play along.\r\n                </Typography>\r\n                <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n                    This lesson has something to offer students of all experience levels.\r\n                    Kids of Elementary School age can use it to practice their fluency at mentally computing sums and differences.\r\n                    Middle School aged kids will learn about combinations and permutations as they build their tree diagrams and consider all the\r\n                    possible things that could happen next. \r\n                    High School aged kids will learn what it means to write a rigorous proof and can apply their algebra skills to create a Magic Square from scratch.\r\n               </Typography>\r\n                <Box width=\"100%\" mb={3} >\r\n                    <Grid container spacing={2} >\r\n                        <Grid item xs={0} sm={2} />\r\n                            \r\n                        <Grid item xs={12} sm={4} >\r\n                            <Button\r\n                                className={classes.button}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                component={RouterLink}\r\n                                to='/tic_tac_toe_rules'\r\n                            >\r\n                                Tic Tac Toe\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={4} >\r\n                            <Button\r\n                                className={classes.button}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                component={RouterLink}\r\n                                to='/fifteen_rules'\r\n                            >\r\n                                The Fifteen Game\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={0} sm={2} />\r\n\r\n                    </Grid>\r\n                </Box>\r\n\r\n                {/* <Typography align='left' color='textPrimary' component='h4' variant='h4' gutterBottom >\r\n                    Tic-Tac-Toe: An Introduction to Proof Writing\r\n                </Typography>\r\n                <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n                    By the time they have played Tic-Tac-Toe a few dozen times most children have gotten pretty good at the game. \r\n                    At this point I like to challenge them to find (and write down) a strategy that will guarantee them a win \r\n                    every time, as long as they get to make the first move. \r\n                    After finding counterexamples to their first few attempts, most kids will intuit that this is an impossible task. \r\n                    At this point I modify the challenge: If you think there is no winning strategy, then prove that instead!\r\n                    Prove that you can at least get a draw no matter what moves your opponent makes when they go first.\r\n                    The point here is that we will not settle for a final answer that is just based on intuition.\r\n                    This task can be completed with simple tools, nothing more than pencil and paper is required! \r\n                    It will take several pages and it will challenge your ability to be thorough and organized in your thinking.\r\n                </Typography>\r\n                <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n                    Finding an actual proof is going to take more than just playing lots of games and recording the results. \r\n                    Even if you win a thousand games in a row, that does not prove you have a winning strategy, just that you have an \r\n                    opponent who's not learning from their mistakes. To actually prove you have a winning strategy you will have to examine every \r\n                    possibile play, not just the ones a particular opponent chooses. Making a tree-diagram that maps out all variations will help \r\n                    you ensure that you have not overlooked any possible moves. There are shortcuts you can take based on symmetry. You may \r\n                    find it helpful to develop your own shorthand notation for a position. You will certainly need to come up with a precice \r\n                    definition of the word \"mistake\".  Exploring possibilities, finding counterexamples, developing new forms of notation, \r\n                    and formulating definitions... This IS what doing Math involves.\r\n                </Typography> */}\r\n                \r\n                {/* <Typography align='left' color='textPrimary' component='h4' variant='h4' gutterBottom >\r\n                    The Fifteen Game: Similarity Beneath the Surface\r\n                </Typography>\r\n                <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n                    Many problems can be solved with less work if, instead of starting from scratch, you look for similarities between the problem \r\n                    at hand and other problems that have already been solved.\r\n                    Two real-world problems may seem unrelated at first even though at a deeper level they are behaving according to the same \r\n                    underlying patterns. Being familiar with mathematics makes you better at noticing when this is the case!\r\n                    Experience this for yourself by playing the two game featured here. \r\n                    Though the two games feel nothing alike when you first play them, the Fifteen Game is startegically identical to Tic-Tac-Toe. \r\n                    If you have mastered Tic-Tac-Toe but still find yourself losing to my bot ath the Fifteen Game then I suggest looking into \"Magic Squares\".\r\n                </Typography> */}\r\n\r\n\r\n                <Typography align='left' color='textPrimary' component='h4' variant='h4' gutterBottom >\r\n                    Behind the Scenes\r\n                </Typography>\r\n                <Typography variant='body1' color='textPrimary' className={classes.paragraph}>\r\n                    This lesson is built with code that is open-source and available on my <a href=\"https://github.com/nolastemgarden\">Github</a> account,\r\n                    so if you have something to add, a bug to report, or simply want to see how it works you are welcome to open an issue or &nbsp;\r\n                    <a href=\"https://github.com/nolastemgarden/tic-tac-toe-and-the-fifteen-game\">clone the repository</a>!\r\n                </Typography>\r\n                <Box p={5} />\r\n            </Container>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\n\r\n\r\n// <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n//     Mathematics is not just a bunch of rules to memorize, it is an expression of human creativity that has\r\n//     been added to by every civilization around the world and throughout time.\r\n//     Humans have been doing math for a long time (about 20 thousand years) and yet the subject is still growing.\r\n//     with new theorems being proven every year. Mathematical proofs can be beautiful and elegant, but this\r\n//     can be difficult to pick up on for someone with an untrained eye because proofs are often written in a way\r\n//     that involves a lot of abstraction and formality.\r\n// </Typography>\r\n\r\n// Just like a musician expresses their creativity in a song, a mathematician expresses their creativity in a\r\n// logical argument.As with songs, there are proofs that are considered classic, there are those that are seen as\r\n//     modern innovations on the classics, and others that are competely novel.\r\n// <Typography align='left' color='textPrimary' component='h4' variant='h4' gutterBottom >\r\n//     Defining Your Terms\r\n// </Typography>\r\n// <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n//     In this lesson we will use certain words that we have and intuitive grasp on: mistake, threat, double-attack. We need to go beyond our intuitive \r\n//     understanding of these words and define them in a precice way. I leave writing and refining these definitions as an exercise for the student. \r\n//     Keep in mind, a good definition is an \"if and only if\" statement, it outlines the conditions which are both necessary and sufficient. \r\n// </Typography>\r\n// <Typography align='left' color='textPrimary' component='h4' variant='h4' gutterBottom >\r\n//     Proof on Paper\r\n// </Typography>\r\n// <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n//     It may take you several pages, but you can prove using an exhaustive tree-diagram that in classic Tic-Tac-Toe both players worst case scenario\r\n//     if they avoid making any mistakes is a draw. If you get stuck or want to check your answers, take a look at the \"Learn Tic Tac Toe Strategy\" page.\r\n// </Typography>\r\n// <Typography align='left' color='textPrimary' component='h4' variant='h4' gutterBottom >\r\n//     Taking It Further\r\n// </Typography>\r\n// <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n//     Is it possible for the player who goes first to make a mistake on the first move of the game? \r\n//     Is is possible for the player who goes second to make a mistake on their first move?\r\n// </Typography> \r\n\r\n\r\n{/* <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n                    1) All Mathematics starts out with a limited set of simple assumptions and builds upon that foundation by putting \r\n                    those pieces together in creative ways to prove more complex ideas must be true. As Jordan Ellenberg put it, \r\n                    \"Mathematics is the extension of of common sense by other means.\"\r\n                </Typography>\r\n                <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n                    2) Mathematics strips away the messy \"real world\" parts of problems and looks for\r\n                    patterns in the inner workings of things. We can deepen our understanding of what seems to be an unfamiliar\r\n                    situation by looking for ways that it is similar to a more familiar situation beneath the surface.\r\n                </Typography> */}\r\n\r\n{/* <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n    At its core, Mathematics is about looking for patterns and trying to explain with logic why those patterns must be true.  \r\n</Typography>\r\n\r\n\r\n<Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n    In math class, the art of writing proofs is often introduced in a needlessly confusing way. \r\n    It is usually mixed into a lesson that also introduces lots of new technical jargon deaing with similar and congruent triangles. \r\n    I think that kids schould be introduced to the art of writing really thorough and persuasive arguments in a context that is more familiar. \r\n</Typography> */}\r\n\r\n\r\n\r\n\r\n// <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n//     Proof is the foundation that all Mathematics sits upon, but the practice of writing \"proofs\" is often\r\n//     taught in a needlessly confusing way. In American schools, students are typically asked to write their first\r\n//     proofs in the context of a geometry class, at the same time as they are being introduced to a lot of new\r\n//     concepts and vocabulary dealing with similar and congruent triangles. This results in people never really \r\n//     coming to understand how a proof is different than a plausible explanation or meerly \"showing your work\". \r\n// </Typography>\r\n// <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n//     Proof should be introduced in a context that is simple and familiar. My favorite way to introduce the concept \r\n//     of proof makes use of the classic game Tic Tac Toe. I challenge you to write down a detailed stategy that \r\n//     one player or the other can use to win every time. If you think no such winning strategy exists, then prove that \r\n//     instead, that the best outcome either player can ensure is a draw.\r\n// </Typography>\r\n// <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n//     This can be done with nothing more than pencil and paper! It will take several pages and it will challenge your \r\n//     ability to organize your thoughts. It's going to take more than just playing lots of games and recording the results. \r\n//     Even if you win a thousand games in a row, that does not prove you have a winning strategy, just that you have an \r\n//     opponent who doesn't learn their lesson. To actually prove you have a winning strategy you will have to examine every \r\n//     possibility, not just the ones a particular opponent plays. Making a tree-diagram that maps out all variations will help \r\n//     you ensure that you have not overlooked any possible moves. There are shortcuts you can take based on symmetry. You may \r\n//     find it helpful to develop your own shorthand notation for a position. You will certainly need to come up with a precice \r\n//     definition of the word \"mistake\".\r\n// </Typography>","import React from 'react';\r\n\r\nimport {\r\n    Link as RouterLink,\r\n} from \"react-router-dom\";\r\n\r\n// My Components\r\nimport Navbar from \"../components/Navbar/Navbar\"\r\n\r\n// MUI  components\r\nimport Box from '@material-ui/core/Box';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography'\r\nimport AppBar from '@material-ui/core/AppBar'\r\n\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        minHeight: 'calc(100vh - 4rem)',\r\n\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        color: theme.palette.common.white,\r\n        padding: '1.0rem',\r\n    },\r\n    button: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        textAlign: 'center',\r\n        width: '95%',\r\n    },\r\n}));\r\n\r\nexport default function FifteenRulesPage() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <AppBar position='sticky' >\r\n                <Navbar pageTitle={\"Play Tic Tac Toe\"} />\r\n            </AppBar>\r\n            <Container className={classes.root} maxWidth='md' >\r\n                <Typography align='center' color='textPrimary' component='h1' variant='h2' gutterBottom >\r\n                    Tic Tac Toe\r\n                </Typography>\r\n\r\n                <Typography align='left' color='textPrimary' component='h4' variant='h4' gutterBottom >\r\n                    Rules of Play\r\n                </Typography>\r\n                <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n                    Tic-Tac-Toe is most commonly played as a paper and pencil game. Two players, one using X's and the other using O's,\r\n                    take turns claiming one cell in a three-by-three grid.  \r\n                    Both players seek to get a three-in-a-row, to have their mark in all three cells in a any row, column,\r\n                    or diagonal. If the whole grid is filled and neither player has managed to get a three-in-a-row then the game\r\n                    ends a draw.\r\n                </Typography>\r\n                <Box width=\"100%\" mb={3} >\r\n                    <Grid container spacing={2} mb={3} >\r\n                        <Grid item xs={12} sm={4} >\r\n                            <Button\r\n                                className={classes.button}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                component={RouterLink}\r\n                                to='/play_vs_human'\r\n                            >\r\n                                Play Human vs. Human\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={4} >\r\n                            <Button\r\n                                className={classes.button}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                component={RouterLink}\r\n                                to='/play_vs_bot'\r\n                            >\r\n                                Play Human vs. Bot\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={4} >\r\n                            <Button\r\n                                className={classes.button}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                component={RouterLink}\r\n                                to='/play_with_coach'\r\n                            >\r\n                                Play with Coach\r\n                            </Button>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n\r\n                </Box>\r\n                <Typography align='left' color='textPrimary' component='h4' variant='h4' gutterBottom >\r\n                    Using Tic Tac Toe in a Math Class\r\n                </Typography>\r\n                <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n                    All of mathematics is based on Proofs: Written logical arguments that leave no room for doubt.  \r\n                    The art of writing proofs is often introduced in a needlessly confusing way in school. \r\n                    It is usually mixed into a geometry lesson that also introduces lots of new technical jargon deaing with similar and congruent triangles.\r\n                    I think that kids should be introduced to the art of writing thorough and persuasive mathematical arguments \r\n                    in a context that is more familiar to them so that the beauty of what a proof is doesn't get lost in a pile of new vocabulary words.\r\n                </Typography>\r\n                <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n                    Once they have played a few dozen times, most children have gotten pretty good at Tic Tac Toe.\r\n                    At this point I like to challenge them to find (and write down) a strategy that will guarantee them a win\r\n                    if they get to make the first move.\r\n                    After finding counterexamples to their first few attempts, most kids will intuit that this is an impossible task.\r\n                    At this point I modify the challenge: If you think there is no winning strategy, then prove that instead!\r\n                    Prove that you can at least get a draw no matter what moves your opponent makes when they go first.\r\n                    The point here is that we will not settle for a final answer that is just based on intuition.\r\n                    This task can be completed with simple tools, nothing more than pencil and paper is required!\r\n                    It will take several pages and it will challenge your ability to be thorough and organized in your thinking.\r\n                </Typography>\r\n                <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n                    Finding an actual proof is going to take more than just playing lots of games and recording the results.\r\n                    Even if you win a thousand games in a row, that does not prove you have a winning strategy, just that you have an\r\n                    opponent who's not learning from their mistakes. To actually prove you have a winning strategy you will have to examine every\r\n                    possibile play, not just the ones a particular opponent chooses. Making a tree-diagram that maps out all variations will help\r\n                    you ensure that you have not overlooked any possible moves. There are shortcuts you can take based on symmetry. You may\r\n                    find it helpful to develop your own shorthand notation for a position. You will certainly need to come up with a precice\r\n                    definition of the word \"mistake\".  Enumerating possibilities, finding counterexamples, developing new forms of notation,\r\n                    and formulating definitions... This IS doing Math.\r\n                </Typography>\r\n\r\n                {/* <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n                    In this app you can play in Human vs. Human mode on a shared device. You can play against my Bot \r\n                    in threee different difficulty settings. Finally, you can play with a bot that will coach you.  \r\n                    The coach offers verbal commentary for what a player should look out for in a given position. \r\n                    If you click \"Show Hints\" the coach will color code the remaining squares to indicate which moves\r\n                     lead to a win, loss, and draw. This is a \"complete solution\" to the game.\r\n                </Typography>\r\n                <Box p={5} /> */}\r\n            </Container>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nimport {\r\n    Link as RouterLink,\r\n} from \"react-router-dom\";\r\n\r\n// My Components\r\nimport Navbar from \"../components/Navbar/Navbar\"\r\n\r\n// MUI  components\r\nimport Box from '@material-ui/core/Box';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography'\r\nimport AppBar from '@material-ui/core/AppBar'\r\n\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        // borderRight: 'solid black 1rem',\r\n        width: '100%',\r\n        minHeight: 'calc(100vh - 4rem)',\r\n\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        color: theme.palette.common.white,\r\n        padding: '1.0rem',\r\n    },\r\n    button: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        textAlign: 'center',\r\n        width: '95%',\r\n    },\r\n}));\r\n\r\nexport default function FifteenRulesPage() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <AppBar position='sticky' >\r\n                <Navbar pageTitle={\"The 15 Game\"} />\r\n            </AppBar>\r\n            <Container className={classes.root} maxWidth='md' >\r\n\r\n\r\n                <Typography align='center' color='textPrimary' component='h1' variant='h2' gutterBottom >\r\n                    The Fifteen Game\r\n                </Typography>\r\n                <Typography align='left' color='textPrimary' component='h4' variant='h4' gutterBottom >\r\n                    Rules of Play\r\n                </Typography>\r\n                <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n                    The Fifteen Game is traditionally played with a set of cards numbered one through nine, but can easily be adapted into \r\n                    a paper and pencil game. Two players take turns claiming one card per turn. \r\n                    The first player to collect a set of exactly three cards that add up to exactly fifteen wins. \r\n                    If you collect more than three cards you may ignore any extras when looking at subsets of three.\r\n                    If all nine cards are claimed and neither player has made a three-card set that sums to 15 then the game ends a draw.\r\n                </Typography>\r\n                <Typography align='left' color='textPrimary' component='h4' variant='h4' gutterBottom >\r\n                    Examples\r\n                </Typography>\r\n                <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n                    It is possible to get a sum of 15 with two, four, or five cards but these combinations do not count as wins.\r\n                    For example taking only the 6 and 9 does not win the game because it is only a two-card set. \r\n                    Similarly taking the 1, 3, 4, and 7 does not win the game because it is a four-card set.\r\n                    Three-card sets that exceed 15 (ie. 6, 7, 8) do not win either. <br/>\r\n                    The two sets 1, 5, 9 and 2, 6, 7 would be winning, even if the player held additional cards not listed. <br/>\r\n                    Bonus Questions: How many different three card combinations are there? How many of them sum to 15?\r\n                </Typography>\r\n                <Grid container spacing={2} >\r\n                    <Grid item xs={12} sm={4} >\r\n                        <Button\r\n                            className={classes.button}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            component={RouterLink}\r\n                            to='/fifteen_vs_human'\r\n                        >\r\n                            Play Human vs. Human\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={4} >\r\n                        <Button\r\n                            className={classes.button}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            component={RouterLink}\r\n                            to='/fifteen_vs_bot'\r\n                        >\r\n                            Play Human vs. Bot\r\n                        </Button>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n                <Box p={2} />\r\n\r\n\r\n                <Typography align='left' color='textPrimary' component='h4' variant='h4' gutterBottom >\r\n                    Using the Fifteen Game in a Math Class\r\n                </Typography>\r\n                <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n                    The Fifteen Game only takes a few minutes to play, making it an ideal brain-break activity.\r\n                    You can also set up a bracket and have a class-wide or school-wide championship tournament.\r\n                </Typography>\r\n                <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n                    For students at the Elementary level, The Fifteen Game is a fantastic way to build automaticity at \r\n                    mentally computing sums and differences. \r\n                    Middle School students will learn about combinations, permutations, and symmetry as they build their tree diagrams \r\n                    and map out all the possible strategies in Tic Tac Toe.\r\n                    High Schoolers can learn what it means to write a rigorous proof in a familiar context. \r\n                    They can also apply their algebra skills to create a Magic Square from scratch.  \r\n                </Typography>\r\n\r\n                <Typography align='left' color='textPrimary' component='h4' variant='h4' gutterBottom >\r\n                    Seeing the Similarity Beneath the Surface\r\n                </Typography>\r\n                <Typography paragraph align='justify' color='textPrimary' component='p' variant='body1' gutterBottom >\r\n                    Many problems can be solved with less work if, instead of starting from scratch, you look for similarities between the problem\r\n                    at hand and other problems that have already been solved.\r\n                    Two real-world problems may seem unrelated at first even though they are behaving according to the same\r\n                    underlying patterns. Being familiar with mathematics makes you better at noticing when this is the case!\r\n                    Experience this for yourself by playing the two games featured here.\r\n                    Though they feel nothing alike when you first play them, the Fifteen Game and Tic-Tac-Toe are actually the same game.\r\n                    In fact, the bot in this app uses the same exact code to select its moves when playing Tic Tac Toe and the Fifteen Game.\r\n                    The only thing that is different is how these moves are represented visually. \r\n                    If you have mastered Tic-Tac-Toe but still find yourself losing to my bot at the Fifteen Game then I suggest looking into \"Magic Squares\".\r\n                </Typography>\r\n            </Container>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","// X always goes first! X and O will be shorthand for the player who goes First and the player who goes second.\r\n// PlayerOne and PlayerTwo are NOT markers of who goes first or second in any given game!\r\n// In the 15 game, PlayerOne and PlayerTWo are distinguished by dark-blue and light-blue\r\n\r\n// All functions exported from this module are used by PlayVsHuman.js PlayVsBot.js PlayWithCoach \r\n// There is some potential to add back in the 15 gameusing these same Game Logic helpers and a different version of the board.\r\n\r\n// Most functions here assume they will be called with a Move List String as the sole parameter. (just the exported ones?)\r\n\r\n////////////////////////////////////////////////////////////////\r\n// Constants: Trio List & Possible Positions & Outcome Maps\r\n////////////////////////////////////////////////////////////////\r\nexport const trioList = generateTrioList()\r\nfunction generateTrioList() {\r\n    let trioList = []\r\n    for (let i = 1; i <= 7; i++) {\r\n        for (let j = i + 1; j <= 8; j++) {\r\n            let k = complementOf(i + j)\r\n            if (k > j && k <= 9) {\r\n                let newTrio = [i, j, k]\r\n                trioList.push(newTrio)\r\n            }\r\n        }\r\n    }\r\n    return trioList\r\n}\r\nexport function complementOf(sumOfTwo) {\r\n    return (15 - sumOfTwo)\r\n}\r\n\r\nconst listOfPossiblePositions = getListOfPossiblePositions()\r\nfunction getListOfPossiblePositions() {\r\n    // Returns an array of arrays of strings\r\n    // Layer 1) indices 0 thru 9 correspond to the lengths of the move lists contained there\r\n    // Layer 2) an array containing all valid move lists of that length\r\n    // Layer 3) Move List string representations\r\n    let positionsList = [[\"\"]]\r\n    for (let parentLength = 0; parentLength < 9; parentLength++) {\r\n        let parentPositions = positionsList[parentLength]\r\n        let childPositions = parentPositions.map(parent => getChildren(parent)).flat()\r\n        positionsList.push(childPositions)\r\n    }\r\n    return positionsList\r\n}\r\n\r\n\r\nexport const outcomeMap = generatePositionToOutcomeMap()\r\nfunction generatePositionToOutcomeMap() {\r\n    let outcomeMap = new Map()\r\n    let list = listOfPossiblePositions\r\n    for (let length = 9; length >= 0; length--) {\r\n        let positions = list[length]\r\n        for (let p = 0; p < positions.length; p++) {\r\n            let ml = positions[p]\r\n            outcomeMap.set(ml, outcome(ml, outcomeMap))\r\n        }\r\n    }\r\n    return outcomeMap\r\n\r\n\r\n}\r\n\r\n////////////////////////////////////////////////////////////////\r\n//  Current Game Status: \"xWins\", \"oWins\", \"draw\",  \"xNext\", or \"oNext\"\r\n////////////////////////////////////////////////////////////////\r\nexport function status(ml) {\r\n    if (xHasWon(ml)) {\r\n        return (\"xWins\")\r\n    }\r\n    else if (oHasWon(ml)) {\r\n        return (\"oWins\")\r\n    }\r\n    else if (ml.length === 9) {\r\n        return (\"draw\")\r\n    }\r\n    else {\r\n        return nextPlayer(ml)  // \"xNext\" || \"oNext\"\r\n    }\r\n}\r\n////////////////////////////////////////////////////////////////\r\n// Game Status Helpers: BOOLEAN\r\n////////////////////////////////////////////////////////////////\r\nexport function nextPlayer(ml) {\r\n    return (ml.length % 2 === 0) ? \"xNext\" : \"oNext\"\r\n}\r\nexport function gameOverUsingStatus(status) {\r\n    return (status === \"xWins\" || status === \"oWins\" || status === \"draw\")\r\n}\r\nexport function gameOver(ml) {\r\n    return (ml.length === 9 || gameHasBeenWon(ml)) ? true : false\r\n}\r\nfunction gameHasBeenWon(ml) {\r\n    return (xHasWon(ml) || oHasWon(ml)) ? true : false\r\n}\r\nexport function xHasWon(ml) {\r\n    return sumsOfThree(xNumbers(ml)).includes(15)\r\n}\r\nexport function oHasWon(ml) {\r\n    return sumsOfThree(oNumbers(ml)).includes(15)\r\n}\r\nexport function gameDrawn(ml) {\r\n    return (ml.length === 9 && !gameHasBeenWon(ml))\r\n}\r\n// function gameWillBeDrawn(ml) {\r\n//     // TODO\r\n// }\r\nexport function moveNumber(ml) {\r\n    return (ml.length + 1)\r\n}\r\nexport function numbersInWin(ml) {\r\n    let Xs = xNumbers(ml)\r\n    let Os = oNumbers(ml)\r\n    let winningTrios = trioList.filter(trio =>\r\n        intersect(trio, Xs).length === 3 || intersect(trio, Os).length === 3\r\n    )\r\n    return winningTrios.flat()\r\n}\r\n\r\n\r\n////////////////////////////////////////////////////////////////\r\n//  Predicted and Final Game Outcomes: \"xWins\", \"oWins\", \"draw\"\r\n////////////////////////////////////////////////////////////////\r\nexport function outcome(ml, outcomeMap) {\r\n    return (gameOver(ml)) ? finalOutcome(ml) : predictedOutcome(ml, outcomeMap)\r\n}\r\nfunction finalOutcome(ml) {\r\n    let outcome = \"error\"\r\n    if (xHasWon(ml)) {\r\n        outcome = \"xWins\"\r\n    }\r\n    else if (oHasWon(ml)) {\r\n        outcome = \"oWins\"\r\n    }\r\n    else if (ml.length === 9) {\r\n        outcome = \"draw\"\r\n    }\r\n    return outcome\r\n}\r\nfunction predictedOutcome(ml, outcomeMap) {\r\n    let outcome = \"error\"\r\n    let childrensOutcomes = getChildren(ml).map(child => outcomeMap.get(child))\r\n    // console.log(`Position: ${position} --> childrensOutcomes: ${childrensOutcomes}`)\r\n    if (nextPlayer(ml) === \"xNext\") {\r\n        if (childrensOutcomes.includes(\"xWins\")) {\r\n            outcome = \"xWins\"\r\n        }\r\n        else if (childrensOutcomes.includes(\"draw\")) {\r\n            outcome = \"draw\"\r\n        }\r\n        else {\r\n            outcome = \"oWins\"\r\n        }\r\n    }\r\n    else {\r\n        if (childrensOutcomes.includes(\"oWins\")) {\r\n            outcome = \"oWins\"\r\n        }\r\n        else if (childrensOutcomes.includes(\"draw\")) {\r\n            outcome = \"draw\"\r\n        }\r\n        else {\r\n            outcome = \"xWins\"\r\n        }\r\n    }\r\n    return outcome\r\n}\r\n\r\n\r\n\r\n\r\n\r\n////////////////////////////////////////////////////////////////\r\n// Isolate each players' claimed numbers: ARRAY(NUM)\r\n////////////////////////////////////////////////////////////////\r\nexport function xNumbers(ml) {\r\n    return moveListStringToArray(ml).filter((move, turn) => turn % 2 === 0)\r\n}\r\nexport function oNumbers(ml) {\r\n    return moveListStringToArray(ml).filter((move, turn) => turn % 2 === 1)\r\n}\r\n// function playerOneNumbers(ml) {  // Always the Human\r\n//     return (playerOneIsX) ? xNumbers(ml) : oNumbers(ml)\r\n// }\r\n// function playerTwoNumbers(ml) {  // Human or Bot, Depending on mode\r\n//     return (playerOneIsX) ? oNumbers(ml) : xNumbers(ml)\r\n// }\r\n\r\n\r\n\r\n////////////////////////////////////////////////////////////////\r\n// Convert Move List Representations:   String <--> Array\r\n////////////////////////////////////////////////////////////////\r\nexport function moveListStringToArray(ml) {               // \"123\" --> [1,2,3]\r\n    return Array.from(ml).map(e => Number(e))\r\n}\r\n// function moveListArrayToString(mla) {               // [1,2,3] --> \"123\"\r\n//     return mla.toString().replaceAll(\",\", \"\")\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n////////////////////////////////////////////////////////////////\r\n// Get Children and Helpers:  An Array of move list Strings\r\n////////////////////////////////////////////////////////////////\r\nexport function getChildren(ml) {\r\n    let children = []\r\n    getValidMoves(ml).forEach(move => children.push(ml + move))\r\n    // this.validMoves(ml).forEach(move => children.push(ml + move))\r\n    return children\r\n}\r\nexport function getValidMoves(ml) {\r\n    return (gameOver(ml)) ? [] : availableNumbers(ml)\r\n}\r\nexport function availableNumbers(ml) {\r\n    let availableNumbers = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9])\r\n    for (let i = 0; i < ml.length; i++) {\r\n        availableNumbers.delete(parseInt(ml.charAt(i)))\r\n    }\r\n    // console.log(`Available Squares: ${availableNumbers}`)\r\n    return Array.from(availableNumbers)\r\n}\r\nexport function getParent(ml) {\r\n    return ml.slice(0, ml.length - 1)\r\n}\r\n\r\n////////////////////////////////////////////////////////////////\r\n// Lowest Level Logic\r\n////////////////////////////////////////////////////////////////\r\nexport function intersect(listOne, listTwo) {\r\n    return listOne.filter(item => listTwo.includes(item))\r\n}\r\nfunction sumsOfThree(moveSet) {\r\n    let sums = []\r\n    if (moveSet.length < 3) {\r\n        return sums\r\n    }\r\n    for (let i = 0; i < moveSet.length - 2; i++) {\r\n        for (let j = i + 1; j < moveSet.length - 1; j++) {\r\n            for (let k = j + 1; k < moveSet.length; k++) {\r\n                let sum = moveSet[i] + moveSet[j] + moveSet[k]\r\n                sums.push(sum)\r\n            }\r\n        }\r\n    }\r\n    return sums\r\n}\r\nexport function sumsOfTwo(moveSet) {\r\n    let sums = []\r\n    if (moveSet.length < 2) {\r\n        return sums\r\n    }\r\n    for (let i = 0; i < moveSet.length - 1; i++) {\r\n        for (let j = i + 1; j < moveSet.length; j++) {\r\n            let sum = moveSet[i] + moveSet[j]\r\n            sums.push(sum)\r\n        }\r\n    }\r\n    return sums\r\n}\r\n\r\n\r\n\r\n// function factorial(num) {\r\n//     console.assert(num >= 0 && num <=9, `Factorial called with a number out of this game's range!`)\r\n//     let product = 1\r\n//     for (let i = 1; i <= num; i++) {\r\n//         product = product * i\r\n//     }\r\n//     return product\r\n//     // This led to a fun research rabbit hole about how to more efficiently compute factorials using Paschals Triangle\r\n// }\r\n\r\n// function inEfficientUnclaimedNumbers(ml) {\r\n//     let unclaimedNumbers = [];\r\n//     for (let i = 1; i <= 9; i++) {\r\n//         if (!ml.includes(i)) {\r\n//             unclaimedNumbers.push(i)\r\n//         }\r\n//     }\r\n//     // console.log(`List Empty Squares: ${emptySquaresList}`)\r\n//     return unclaimedNumbers;\r\n// }\r\n\r\n","import {\r\n    status,\r\n    xNumbers,\r\n    oNumbers,\r\n    trioList,\r\n    outcomeMap,\r\n    intersect,\r\n    availableNumbers,\r\n    moveListStringToArray\r\n} from \"./GameLogic\";\r\n\r\nexport function highlightWins(ml) {\r\n    let colors = Array(10).fill('noColor')\r\n    numbersInWin(ml).forEach(num => colors[num] = 'win')\r\n    return colors\r\n}\r\n\r\nexport function numbersInWin(ml) {\r\n    let Xs = xNumbers(ml)\r\n    let Os = oNumbers(ml)\r\n    let winningTrios = trioList.filter(trio =>\r\n        intersect(trio, Xs).length === 3 || intersect(trio, Os).length === 3\r\n    )\r\n    return winningTrios.flat()\r\n}\r\n\r\nexport function getBoardIcons(ml) {\r\n    let data = Array(10).fill('_');  // Start with an array representing a board of NINE empty squares\r\n    let mlArray = moveListStringToArray(ml)\r\n    mlArray.forEach((squareId, turn) => {\r\n        data[squareId] = (turn % 2 === 0) ? 'x' : 'o'\r\n    })\r\n    return data;  // this method only deals with current board position, not hypotheticals.  Thus, it wants to use a version of helper squaresClaimedByPlayer() that does not require a moveList be explicitly passed in. \r\n}\r\n\r\n\r\n\r\nexport function getBoardHints(ml) {\r\n    let colors = Array(10).fill('noColor')\r\n    availableNumbers(ml).forEach(num => {\r\n        let outcome = outcomeMap.get(ml + num.toString())\r\n        colors[num] = getHintColor(outcome, ml)\r\n    })\r\n    console.log(`COLORS: ${colors}`)\r\n    return colors\r\n}\r\n\r\nfunction getHintColor(outcome, ml) {\r\n    let gameStatus = status(ml)\r\n    if (outcome === \"draw\") {\r\n        return \"draw\"\r\n    }\r\n    else if (gameStatus === \"xNext\") {\r\n        return (outcome === \"xWins\") ? \"win\" : \"lose\"\r\n    }\r\n    else if (gameStatus === \"oNext\") {\r\n        return (outcome === \"oWins\") ? \"win\" : \"lose\"\r\n    }\r\n    else {\r\n        console.error(`Error in Get Hint Color`);\r\n    }\r\n}","import React from 'react';\r\n\r\n// My Logical Components\r\n\r\n// My Components\r\n\r\n// MUI  components\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    square: {\r\n        width: '15vh',\r\n        backgroundColor: theme.palette.common.white,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    iconX: {\r\n        width: '100%',\r\n        height: '100%',\r\n        color: theme.palette.common.black\r\n    },\r\n    iconO: {\r\n        width: '80%',\r\n        height: '80%',\r\n        color: theme.palette.common.black\r\n    },\r\n    noColor: {\r\n        backgroundColor: '#ddd',\r\n    },\r\n    win: {\r\n        backgroundColor: '#3B3'\r\n    },\r\n    draw: {\r\n        backgroundColor: '#FF3'\r\n    },\r\n    lose: {\r\n        backgroundColor: '#F44'\r\n    },\r\n}));\r\n\r\nexport default function Square(props) {\r\n    const classes = useStyles();\r\n\r\n    let squareIcon;\r\n    switch (props.icon) {\r\n        case 'x':\r\n            squareIcon = <ClearIcon className={classes.iconX} />\r\n            break;\r\n        case 'o':\r\n            squareIcon = <RadioButtonUncheckedIcon className={classes.iconO} />\r\n            break;\r\n        case '_':\r\n            // squareIcon = <Typography variant='h3' color='textSecondary' >{props.number}</Typography> // \r\n            break;\r\n        default:\r\n            console.error(\"Square passed symbol not 'x' 'o' or '_'\");\r\n    }\r\n\r\n    let squareColorClassName;\r\n    switch (props.color) {\r\n        case 'claimed':\r\n            squareColorClassName = `${classes.square} ${classes.claimed} `\r\n            break;\r\n        case 'unclaimed':\r\n            squareColorClassName = `${classes.square} ${classes.unclaimed} `\r\n            break;\r\n        case 'noColor':\r\n            squareColorClassName = `${classes.square} ${classes.noColor} `\r\n            break;\r\n        case 'draw':\r\n            squareColorClassName = `${classes.square} ${classes.draw} `\r\n            break;\r\n        case 'win':\r\n            squareColorClassName = `${classes.square} ${classes.win} `\r\n            break;\r\n        case 'lose':\r\n            squareColorClassName = `${classes.square} ${classes.lose} `\r\n            break;\r\n        default:\r\n            squareColorClassName = `${classes.square} `\r\n    }\r\n\r\n    return (\r\n        <Paper\r\n            number={props.number}\r\n            elevation={4}\r\n            className={squareColorClassName}\r\n            onClick={() => props.handleBoardClick(props.number.toString())}\r\n        >\r\n            {squareIcon}\r\n        </Paper>\r\n    )\r\n}","import React from 'react';\r\n\r\n// My Logical Components\r\nimport { status } from \"../../logic/GameLogic\";\r\nimport {\r\n    highlightWins,\r\n    getBoardIcons,\r\n    getBoardHints,\r\n} from \"../../logic/BoardLogic\";\r\n\r\n// My Components\r\nimport Square from \"./Square\";\r\n\r\n// MUI  components\r\nimport Box from '@material-ui/core/Box';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    board: {\r\n        width: 'min(50vh, 100%)',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-around',\r\n        alignItems: 'center',\r\n    },\r\n    row: {\r\n        // border: 'solid purple 1px',\r\n        width: '100%',  \r\n        height: '15vh',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around',\r\n    },\r\n    \r\n}));\r\n\r\nexport default function Board(props) {\r\n    const classes = useStyles();    \r\n    const boardNumbers = [2,9,4,7,5,3,6,1,8]\r\n    let moveList = props.moveList\r\n\r\n    let boardIcons = getBoardIcons(moveList)\r\n    let boardColors = getBoardColors(moveList)\r\n    \r\n    let squares = []\r\n    boardNumbers.forEach(num => {\r\n        let newSquare =\r\n            <Square\r\n                key={num}\r\n                number={num}\r\n                icon={boardIcons[num]}\r\n                color={boardColors[num]}\r\n                handleBoardClick={props.handleBoardClick}\r\n            />\r\n        squares.push(newSquare);\r\n    })\r\n\r\n    return (\r\n        <Box className={classes.board} >\r\n            <Box className={classes.row} >\r\n                {squares.slice(0,3)}\r\n            </Box>\r\n            <Box className={classes.row} >\r\n                {squares.slice(3, 6)}\r\n            </Box>\r\n            <Box className={classes.row} >\r\n                {squares.slice(6, 9)}\r\n            </Box>\r\n        </Box>\r\n\r\n        \r\n    )\r\n\r\n    function getBoardColors(ml) {\r\n        let gameStatus = status(ml)\r\n        if (gameStatus === \"xWins\" || gameStatus === \"oWins\") {\r\n            return highlightWins(ml)\r\n        }\r\n        else if (props.showHints === true) {\r\n            return getBoardHints(ml)\r\n        }\r\n        else {\r\n            return Array(10).fill('noColor')\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\n// My Logical Components\r\nimport {\r\n    numbersInWin,\r\n    moveListStringToArray\r\n} from \"../../logic/GameLogic\";\r\n// import {\r\n//     highlightWins,\r\n//     getBoardHints,\r\n// } from \"../../logic/BoardLogic\";\r\n\r\n// My Components\r\n// import NumCard from \"./NumCard\";\r\n\r\n// MUI  components\r\nimport Box from '@material-ui/core/Box';\r\nimport Container from '@material-ui/core/Container';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    board: {\r\n        width: 'min(100%, 720px)',\r\n        margin: '0 auto',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-around',\r\n        alignItems: 'center',\r\n    },\r\n    row: {\r\n        // border: 'solid purple 1px',\r\n        width: '100%',\r\n        height: '22vh',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n    },\r\n    card: {\r\n        width: '18%',\r\n        margin: '0 1%',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        color: theme.palette.common.black,\r\n        backgroundColor: theme.palette.common.white,\r\n\r\n    },\r\n    playerOne: {\r\n        backgroundColor: theme.palette.playerOne.backgroundColor,\r\n        color: theme.palette.playerOne.text,\r\n    },\r\n    playerTwo: {\r\n        backgroundColor: theme.palette.playerTwo.backgroundColor,\r\n        color: theme.palette.playerTwo.text,\r\n    },\r\n    highlightWins: {\r\n        backgroundColor: theme.palette.primary.main,\r\n\r\n    },\r\n\r\n}));\r\n\r\n// What does the Board NEED to render all 9 number cards? \r\n// Needs to know each cards num, const in order.\r\n// Needs each cards CLAIM status, X O or _\r\n// Needs bool, if card is part of win. \r\n\r\nexport default function FifteenBoard(props) {\r\n    const classes = useStyles();\r\n\r\n    let ml = props.moveList\r\n    // let gameStatus = status(ml) \r\n    \r\n\r\n    const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    \r\n    let claims = getClaims(ml)  // An Array of 'x' 'o' & '_'\r\n    function getClaims(ml) {\r\n        let data = Array(10).fill('_');\r\n        let mla = moveListStringToArray(ml)\r\n        mla.forEach((num, turn) => {\r\n            data[num] = (turn % 2 === 0) ? 'x' : 'o'\r\n        })\r\n        console.log(`Claims data: ${data}`);\r\n        return data\r\n    }\r\n\r\n    let wins = getWins(ml)       // An Array of booleans, true if part of winning trio\r\n    function getWins(ml) {\r\n        let data = Array(10).fill(false)\r\n        numbersInWin(ml).forEach(num => data[num] = true)\r\n        return data\r\n    }\r\n\r\n    \r\n    \r\n    let numCards = []\r\n    \r\n    numbers.forEach(num => {\r\n        let newNumCard =\r\n            <Card\r\n                key={num}\r\n                \r\n                num={num}\r\n                claim={claims[num]}\r\n                border={wins[num]}\r\n                handleBoardClick={props.handleBoardClick}\r\n            />\r\n        numCards.push(newNumCard);\r\n    })\r\n\r\n    return (\r\n        <Container maxWidth='md' >\r\n            <Box className={classes.board} >\r\n                <Box className={classes.row} >\r\n                    {numCards.slice(0, 5)}\r\n                </Box>\r\n                <Box className={classes.row} >\r\n                    {numCards.slice(5, 9)}\r\n                </Box>\r\n            </Box>\r\n        </Container>\r\n\r\n        \r\n    )\r\n}\r\n\r\nfunction Card(props) {\r\n    const classes = useStyles();\r\n\r\n\r\n    let cardStatusClassName\r\n    switch (props.claim) {\r\n        case 'x':\r\n            cardStatusClassName = `${classes.card} ${classes.playerOne} `\r\n            break;\r\n        case 'o':\r\n            cardStatusClassName = `${classes.card} ${classes.playerTwo} `\r\n            break;\r\n        case '_':\r\n            cardStatusClassName = `${classes.card} `\r\n            break;\r\n        default:\r\n            throw console.error(`Card passed invalid claim: ${props.color}`);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Box number={props.num}\r\n            className = { cardStatusClassName }\r\n            onClick = {() => props.handleBoardClick(props.num)}\r\n            border={(props.border === true) ? 'solid green 8px' : ''}\r\n            borderRadius='1rem'\r\n        >\r\n                <Typography color='inherit' variant='h1' >\r\n                    {props.num}\r\n                </Typography>\r\n        </Box>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\nimport { status } from \"../../../logic/GameLogic\";\r\n\r\n// MUI Components\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default function StatusHeader(props) {\r\n    const gameStatus = status(props.moveList);\r\n\r\n    function statusMessage(status) {\r\n        if (props.game === 'tic-tac-toe') {\r\n            switch (status) {\r\n                case \"xWins\":\r\n                    return \"Game Over. X Wins!\"\r\n                case \"oWins\":\r\n                    return \"Game Over. O Wins!\"\r\n                case \"draw\":\r\n                    return \"Game Over! Draw.\"\r\n                case \"xNext\":\r\n                    return \"It is X's turn.\"\r\n                case \"oNext\":\r\n                    return \"It is O's turn.\"\r\n                default:\r\n                    return \"Error\";\r\n            }\r\n        }\r\n        else if (props.game === 'fifteen-game') {\r\n            switch (status) {\r\n                case \"xWins\":\r\n                    return \"Game Over. Red Wins!\"\r\n                case \"oWins\":\r\n                    return \"Game Over. Blue Wins!\"\r\n                case \"draw\":\r\n                    return \"Game Over! Draw.\"\r\n                case \"xNext\":\r\n                    return \"It is Red's turn.\"\r\n                case \"oNext\":\r\n                    return \"It is Blue's turn.\"\r\n                default:\r\n                    return \"Error\";\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Typography color=\"textPrimary\" align='center' component='h1' variant='h4' noWrap gutterBottom>\r\n            {statusMessage(gameStatus)}\r\n        </Typography>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\n\r\nimport { gameOverUsingStatus } from \"../../../logic/GameLogic\";\r\n\r\n// MUI Components\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default function StatusHeader(props) {\r\n    const gameOver = gameOverUsingStatus(props.status)\r\n    const gameNumber = props.gameNumber\r\n    return gameOver ? \"\":\r\n        <Typography color = \"textPrimary\" align = 'center' component = 'h1' variant = 'h4' noWrap gutterBottom>\r\n            Game&nbsp;{ gameNumber }:\r\n        </Typography>\r\n    \r\n}\r\n","import React from 'react';\r\n\r\n// Custom Components\r\n\r\n// MUI Components\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    record: {\r\n        color: theme.palette.common.white,\r\n        margin: '0rem 35%',\r\n        width: '30%',\r\n        height: '4.5rem',\r\n        fontSize: '1.1rem',\r\n    },\r\n\r\n}));\r\n\r\nexport default function TicTacToeRecord(props) {\r\n    const classes = useStyles();\r\n\r\n    let playerOne = \"\"\r\n    let playerTwo = \"\"\r\n    if (props.playMode === \"humanVsHuman\") {\r\n        playerOne = \"Player X\"\r\n        playerTwo = \"Player O\"\r\n    }\r\n    else if (props.playMode === \"humanVsBot\") {\r\n        if (props.humanGoesFirst) {\r\n            playerOne = \"X Human\"\r\n            playerTwo = \"O Bot\"\r\n        }\r\n        else {\r\n            playerOne = \"O Human\"\r\n            playerTwo = \"X Bot\"\r\n        }\r\n    }\r\n    else {\r\n        console.error(`WinLossDrawRecord tried to render with invalid playMode prop: ${props.playMode}`)\r\n    }\r\n\r\n    return (\r\n        <Box className={classes.record} >\r\n            <Grid container >\r\n                <Grid item xs={9}>\r\n                    <Typography color=\"textPrimary\" align='left' component='h3' variant='h5' noWrap >\r\n                        {playerOne}:\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <Typography color=\"textPrimary\" align='right' component='h3' variant='h5' noWrap >\r\n                        {props.record[0]}\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container >\r\n                <Grid item xs={9}>\r\n                    <Typography color=\"textPrimary\" align='left' component='h3' variant='h5' noWrap >\r\n                        {playerTwo}:\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <Typography color=\"textPrimary\" align='right' component='h3' variant='h5' noWrap >\r\n                        {props.record[1]}\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container >\r\n                <Grid item xs={9}>\r\n                    <Typography color=\"textPrimary\" align='left' component='h3' variant='h5' noWrap >\r\n                        Draw:\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <Typography color=\"textPrimary\" align='right' component='h3' variant='h5' noWrap >\r\n                        {props.record[2]}\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\n// Custom Components\r\n// import TurnArrowIcon from './TurnArrowIcon';\r\n\r\n// MUI Components\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    record: {\r\n        color: theme.palette.common.white,\r\n        margin: '0rem 25%',\r\n        width: '50%',\r\n        height: '4.5rem',\r\n        fontSize: '1.1rem',\r\n    },\r\n    recordRow: {\r\n        display: 'flex',\r\n        justifyContent: 'end',\r\n        alignItems: 'center'\r\n    },\r\n    colorTileOne: {\r\n        width: '1.2rem',\r\n        height: '1.2rem',\r\n        borderRadius: '15%',\r\n        margin: '0 .5rem 0 auto',\r\n        backgroundColor: theme.palette.playerOne.backgroundColor\r\n    },\r\n    colorTileTwo: {\r\n        width: '1.2rem',\r\n        height: '1.2rem',\r\n        borderRadius: '15%',\r\n        margin: '0 .5rem 0 auto',\r\n        backgroundColor: theme.palette.playerTwo.backgroundColor\r\n    }\r\n}));\r\n\r\nfunction ColorTile(props) {\r\n    const classes = useStyles();\r\n\r\n    return (props.player === \"playerOne\") ?\r\n        <Box className={classes.colorTileOne} /> :\r\n        <Box className={classes.colorTileTwo} />\r\n}\r\n\r\nexport default function FifteenRecord(props) {\r\n    const classes = useStyles();\r\n\r\n\r\n    let playerOneName = \"\"\r\n    let playerTwoName = \"\"\r\n    if (props.playMode === \"humanVsHuman\") {\r\n        playerOneName = \"Player One\"\r\n        playerTwoName = \"Player Two\"\r\n    }\r\n    else if (props.playMode === \"humanVsBot\") {\r\n        playerOneName = \"Human\"\r\n        playerTwoName = \"Bot\"\r\n    }\r\n    else {\r\n        console.error(`WinLossDrawRecord tried to render with invalid playMode prop: ${props.playMode}`)\r\n    }\r\n\r\n    \r\n    let playerOneSymbol = \"\"\r\n    let playerTwoSymbol = \"\"\r\n    if (props.playMode === \"humanVsHuman\") {\r\n        playerOneSymbol = <ColorTile player='playerOne' />\r\n        playerTwoSymbol = <ColorTile player='playerTwo' />\r\n    }\r\n    else if (props.playMode === \"humanVsBot\") {\r\n        if (props.humanGoesFirst === true) {\r\n            playerOneSymbol = <ColorTile player='playerOne' />\r\n            playerTwoSymbol = <ColorTile player='playerTwo' />\r\n        }\r\n        else {\r\n            playerOneSymbol = <ColorTile player='playerTwo' />\r\n            playerTwoSymbol = <ColorTile player='playerOne' />\r\n        }\r\n    }\r\n    else {\r\n        console.error(`WinLossDrawRecord tried to render with invalid playMode prop: ${props.playMode}`)\r\n    }\r\n    \r\n\r\n    return (\r\n        <Box className={classes.record} >\r\n            <Grid container className={classes.recordRow}>\r\n                {/* <Grid item xs={2}>\r\n                    <TurnArrowIcon\r\n                        status={props.status}\r\n                    />\r\n                </Grid> */}\r\n                <Grid item xs={2}>\r\n                    {playerOneSymbol}\r\n                </Grid>\r\n                <Grid item xs={8}>\r\n                    <Typography color=\"textPrimary\" align='left' component='h3' variant='h5' noWrap >\r\n                        {playerOneName}:\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <Typography color=\"textPrimary\" align='right' component='h3' variant='h5' noWrap >\r\n                        {props.record[0]}\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container className={classes.recordRow}>\r\n                {/* <Grid item xs={2}>\r\n                    <TurnArrowIcon\r\n                        status={props.status}\r\n                    />\r\n                </Grid> */}\r\n                <Grid item xs={2}>\r\n                    {playerTwoSymbol}\r\n                </Grid>\r\n                <Grid item xs={8}>\r\n                    <Typography color=\"textPrimary\" align='left' component='h3' variant='h5' noWrap >\r\n                        {playerTwoName}:\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <Typography color=\"textPrimary\" align='right' component='h3' variant='h5' noWrap >\r\n                        {props.record[1]}\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container className={classes.recordRow}>\r\n                {/* <Grid item xs={2}>\r\n\r\n                </Grid> */}\r\n                <Grid item xs={2}>\r\n\r\n                </Grid>\r\n                <Grid item xs={8}>\r\n                    <Typography color=\"textPrimary\" align='left' component='h3' variant='h5' noWrap >\r\n                        Draw:\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <Typography color=\"textPrimary\" align='right' component='h3' variant='h5' noWrap >\r\n                        {props.record[2]}\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\n// My Components\r\n\r\n// MUI Components\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n// MUI Icons\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\n\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        width: '100%',\r\n        height: '2.1rem',\r\n        fontSize: '1rem',\r\n    },\r\n}));\r\n\r\nexport default function NewGameButton(props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Button\r\n            className={classes.button}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => props.handleNewGameClick()}\r\n            disabled={!props.gameOver}\r\n        >\r\n            <Box mr={2} display=\"flex\" alignContent=\"center\" >\r\n                <ReplayIcon />\r\n            </Box>\r\n            New&nbsp;Game\r\n        </Button>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nimport { moveNumber } from \"../../logic/GameLogic\";\r\n\r\n\r\n// MUI Components\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n// MUI Icons\r\nimport UndoIcon from '@material-ui/icons/Undo';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        width: '100%',\r\n        height: '2.1rem',\r\n        fontSize: '1rem',\r\n    },\r\n}));\r\n\r\nexport default function UndoButton(props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Button\r\n            className={classes.button}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => props.handleUndoClick()}\r\n            disabled={props.gameOver || moveNumber(props.moveList) === 1}\r\n        >\r\n            <Box mr={2} display=\"flex\" alignContent=\"center\" >\r\n                <UndoIcon />\r\n            </Box>\r\n            Undo\r\n        </Button>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\n// import { moveNumber, status } from \"../../logic/GameLogic\";\r\n\r\n// Custom Components\r\nimport StatusHeader from './Parts/StatusHeader';\r\nimport GameNumber from './Parts/GameNumber';\r\nimport TicTacToeRecord from '../../components/Panels/Parts/TicTacToeRecord'\r\nimport FifteenRecord from '../../components/Panels/Parts/FifteenRecord'\r\n\r\nimport NewGameButton from \"../Buttons/NewGameButton\";\r\nimport UndoButton from \"../Buttons/UndoButton\";\r\n\r\n// MUI Components\r\nimport {Box, Grid, Container} from '@material-ui/core';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    panel: {\r\n        // border: 'solid orange 1px',\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    infoArea: {\r\n        // border: 'solid red 1px',\r\n        flex: '1 0 50%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        padding: '1.0rem',\r\n    },\r\n    controls: {\r\n        // border: 'solid green 1px',\r\n        flex: '1 0 50%',\r\n    },\r\n}));\r\n\r\nexport default function HumanPanel(props) {\r\n    const classes = useStyles();\r\n    \r\n    function gameOver(s = props.status) {\r\n        return (s === \"xWins\" || s === \"oWins\" || s === \"draw\")\r\n    }\r\n\r\n    let record = (props.game === \"tic-tac-toe\") ?\r\n        <TicTacToeRecord\r\n            playMode=\"humanVsHuman\"\r\n            record={props.record}\r\n            status={props.status}\r\n        /> :\r\n        <FifteenRecord\r\n            playMode=\"humanVsHuman\"\r\n            record={props.record}\r\n            status={props.status}\r\n        />\r\n\r\n    return (\r\n        <Container maxWidth='sm' className={classes.panel} >\r\n            <Box className={classes.infoArea} >\r\n                <Box display=\"flex\" justifyContent=\"center\" color=\"textPrimary\" >\r\n                    <GameNumber\r\n                        status={props.status}\r\n                        gameNumber={props.gameNumber}\r\n                    />&nbsp;&nbsp;&nbsp;\r\n                    <StatusHeader\r\n                        game={props.game}\r\n                        moveList={props.moveList}\r\n                        humanGoesFirst={props.humanGoesFirst}\r\n                    />\r\n                </Box>\r\n                {record}\r\n            </Box>\r\n            <Grid container spacing={3} className={classes.controls} >\r\n                <Grid item xs={6} >\r\n                    <NewGameButton\r\n                        gameOver={gameOver()}\r\n                        handleNewGameClick={props.handleNewGameClick}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={6}  >\r\n                    <UndoButton\r\n                        moveList={props.moveList}\r\n                        gameOver={gameOver()}\r\n                        handleUndoClick={props.handleUndoClick}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\n","import React, { useState } from 'react';\r\n\r\n// My Logical Components\r\nimport {\r\n    status,\r\n    gameOver,\r\n    xHasWon, \r\n    oHasWon, \r\n    gameDrawn,\r\n} from \"../logic/GameLogic\";\r\n\r\n// My React  Components\r\nimport Navbar from \"../components/Navbar/Navbar\"\r\nimport TicTacToeBoard from \"../components/Boards/TicTacToeBoard\"\r\nimport FifteenBoard from \"../components/Boards/FifteenBoard\"\r\nimport HumanPanel from \"../components/Panels/HumanPanel\"\r\n\r\n// MUI  components\r\nimport Box from '@material-ui/core/Box';\r\n\r\n// Custom Styling\r\nimport '../styles/TicTacToe.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '97%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    navbarArea: {\r\n        // border: 'solid blue 1px',\r\n        width: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        flex: '1 0 5vh',\r\n    },\r\n    boardArea: {\r\n        // border: 'solid green 1px',\r\n        display: 'flex',\r\n        flex: '1 0 50vh',\r\n        justifyContent: 'center',\r\n    },\r\n    panelArea: {\r\n        // border: 'solid red 1px',\r\n        color: theme.palette.common.white,\r\n        backgroundColor: theme.palette.common.black,\r\n        display: 'flex',\r\n        flex: '1 0 45vh',\r\n    },\r\n}));\r\n\r\n\r\nexport default function PlayVsHuman(props) {\r\n    const classes = useStyles();\r\n\r\n    let [moveList, setMoveList] = useState(\"\");\r\n    let [gameNumber, setGameNumber] = useState(1);     \r\n    let [record, setRecord] = useState([0, 0, 0]);     \r\n\r\n    console.assert(props.game === \"tic-tac-toe\" || props.game === \"fifteen-game\")\r\n    let board = (props.game === \"tic-tac-toe\") ? \r\n        <TicTacToeBoard\r\n            moveList={moveList}\r\n\r\n            handleBoardClick={handleBoardClick}\r\n            showHints={false}\r\n        /> : \r\n        <FifteenBoard\r\n            moveList={moveList}\r\n\r\n            handleBoardClick={handleBoardClick}\r\n            showHints={false}\r\n\r\n        />\r\n\r\n    \r\n    return (\r\n        <Box className={classes.root} >\r\n            <Box className={classes.navbarArea}>\r\n                <Navbar pageTitle={(props.game === \"tic-tac-toe\") ? \"Tic Tac Toe vs. Human\" : \"15 Game vs. Human\"} />\r\n            </Box>\r\n            \r\n            <Box className={classes.boardArea}>\r\n                {board}\r\n            </Box>\r\n\r\n            <Box className={classes.panelArea}>\r\n                <HumanPanel\r\n                    game={props.game}\r\n                    gameNumber={gameNumber}\r\n                    record={record}\r\n                    moveList={moveList}\r\n                    status={status(moveList)}\r\n                    handleUndoClick={handleUndoClick}\r\n                    handleNewGameClick={handleNewGameClick}\r\n                />\r\n            </Box>\r\n        </Box>\r\n    )\r\n\r\n    \r\n    ///////////////////////////////////////////////////\r\n    // CLICK HANDLERS\r\n    ///////////////////////////////////////////////////\r\n    function handleBoardClick(numberClicked) {\r\n        if (gameOver(moveList)) {\r\n            console.log(\"return without effects from handleBoardClick(). The Game is already over.\")\r\n            return;\r\n        }\r\n        if (moveList.includes(numberClicked)) {\r\n            console.log(\"return without effects from handleBoardClick(). That square has already been claimed.\")\r\n            return;\r\n        }\r\n        // If we reach this point the clicked square is open and the game is not over yet ... \r\n        let updatedMoveList = moveList.concat(numberClicked)\r\n        console.log(`MoveList: ${updatedMoveList}`)\r\n\r\n        setMoveList(updatedMoveList);\r\n\r\n        if (gameOver(updatedMoveList)) {\r\n            handleGameOver(updatedMoveList)\r\n        }\r\n    }\r\n    function handleUndoClick() {\r\n        const shortenedMoveList = moveList.slice(0, moveList.length - 1)\r\n        console.log(`handleUndoClick() removed ${moveList[moveList.length - 1]}. New Shortened history: ${shortenedMoveList}`);\r\n        setMoveList(shortenedMoveList);\r\n    }\r\n    function handleNewGameClick() {\r\n        const empty = [];\r\n        const nextGameNumber = ++gameNumber;\r\n        setMoveList(empty);\r\n        setGameNumber(nextGameNumber);\r\n    }\r\n\r\n    function handleGameOver(mls) {\r\n        // console.assert(gameOver(ml) === true, `NO EFFECT. handleGameOver called but the game isn't actually over!`);\r\n        if (xHasWon(mls)) {\r\n            setRecord([++record[0], record[1], record[2]])\r\n        }\r\n        else if (oHasWon(mls)) {\r\n            setRecord([record[0], ++record[1], record[2]])\r\n        }\r\n        else if (gameDrawn(mls)) {\r\n            setRecord([record[0], record[1], ++record[2]])\r\n        }\r\n        else {\r\n            console.error(`handleGameOver called with invalid game result!`)\r\n        }\r\n    }\r\n\r\n}\r\n","// X always goes first! X and O will be shorthand for the player who goes First and the player who goes second.\r\n// PlayerOne and PlayerTwo are NOT markers of who goes first or second in any given game!\r\n// In the 15 game, PlayerOne and PlayerTWo are distinguished by dark-blue and light-blue\r\nimport { outcomeMap, sumsOfTwo, complementOf, intersect, gameOver, xNumbers, oNumbers, nextPlayer, availableNumbers } from \"./GameLogic\";\r\n\r\n\r\n\r\n\r\n/////////////////////////////////////////////////////////////////////////\r\n// Coach & Bot Logic: Immediately Winning & Urgent Defensive Moves \r\n/////////////////////////////////////////////////////////////////////////\r\n// For NEXT Player on NEXT turn\r\nexport function winningMoves(mls) { \r\n    if (nextPlayer(mls) === \"xNext\") {\r\n        let complements = sumsOfTwo(xNumbers(mls)).map(sum => complementOf(sum))\r\n        return intersect(availableNumbers(mls), complements)\r\n    }\r\n    else {\r\n        let complements = sumsOfTwo(oNumbers(mls)).map(sum => complementOf(sum))\r\n        return intersect(availableNumbers(mls), complements)\r\n    }\r\n}\r\nexport function urgentDefensiveMoves(mls) {\r\n    if (nextPlayer(mls) === \"xNext\") {\r\n        let complements = sumsOfTwo(oNumbers(mls)).map(sum => complementOf(sum))\r\n        return intersect(availableNumbers(mls), complements)\r\n    }\r\n    else {\r\n        let complements = sumsOfTwo(xNumbers(mls)).map(sum => complementOf(sum))\r\n        return intersect(availableNumbers(mls), complements)\r\n    }\r\n}\r\nexport function doubleAttackingMoves(mls) {\r\n    let doubleAttackingMoves = availableNumbers(mls).filter(num => urgentDefensiveMoves(mls.concat(num)).length > 1)\r\n    return doubleAttackingMoves\r\n}\r\n\r\n\r\nexport function drawingMoves(mls) { // For NEXT Player\r\n    if (nextPlayer(mls) === \"xNext\") {\r\n        let complements = sumsOfTwo(xNumbers(mls)).map(sum => complementOf(sum))\r\n        return intersect(availableNumbers(mls), complements)\r\n    }\r\n    else {\r\n        let complements = sumsOfTwo(oNumbers(mls)).map(sum => complementOf(sum))\r\n        return intersect(availableNumbers(mls), complements)\r\n    }\r\n}\r\n\r\n\r\nexport function winningMovesForBot(mls, humanPlaysX) {\r\n    availableNumbers(mls)\r\n    \r\n}\r\n\r\nexport function sortBotMoves(ml, humanPlaysX) {\r\n    let winningForBot = []\r\n    let drawing = []\r\n    let winningForHuman = []\r\n\r\n\r\n    let validMoves = getValidMoves(ml)\r\n    validMoves.forEach(move => {\r\n        let newPosition = ml.concat(move)\r\n        let outcome = outcomeMap.get(newPosition)\r\n        if (outcome === \"draw\") {\r\n            drawing.push(move)\r\n        }\r\n        else if (outcome === \"xWins\") {\r\n            if (humanPlaysX) {\r\n                winningForHuman.push(move)\r\n            }\r\n            else {\r\n                winningForBot.push(move)\r\n            }\r\n        }\r\n        else if (outcome === \"oWins\") {\r\n            if (humanPlaysX) {\r\n                winningForBot.push(move)\r\n            }\r\n            else {\r\n                winningForHuman.push(move)\r\n            }\r\n        }\r\n        else {\r\n            console.error(`Error in sortBotMoves`)\r\n        }\r\n    })\r\n    return {\r\n        \"winningForBot\": winningForBot,\r\n        \"drawing\": drawing,\r\n        \"winningForHuman\": winningForHuman,\r\n    }\r\n}\r\n\r\n\r\n////////////////////////////////////////////////////////////////\r\n// Isolate each players' claimed numbers: ARRAY(NUM)\r\n////////////////////////////////////////////////////////////////\r\n// function botsNumbers(ml, humanPlaysX) {  // Always the Human\r\n//     return (humanPlaysX) ? oNumbers(ml) : xNumbers(ml)\r\n// }\r\n\r\n\r\n// Randomly selects a move from a list of possible next moves.\r\nexport function selectMoveRandomly(moveSet) {\r\n    return moveSet[Math.floor(Math.random() * moveSet.length)]\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////////////\r\n// Coach & Bot Logic: Immediately Winning & Urgent Defensive Moves \r\n/////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n\r\n////////////////////////////////////////////////////////////////\r\n// Get Children and Helpers:  An Array of move list Strings\r\n////////////////////////////////////////////////////////////////\r\nexport function getChildren(mls) {\r\n    let children = []\r\n    getValidMoves(mls).forEach(move => children.push(mls + move))\r\n    // this.validMoves(mls).forEach(move => children.push(mls + move))\r\n    return children\r\n}\r\nfunction getValidMoves(mls) {\r\n    return (gameOver(mls)) ? [] : availableNumbers(mls)\r\n}\r\n// export function availableNumbers(mls) {\r\n//     let availableNumbers = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9])\r\n//     for (let i = 0; i < mls.length; i++) {\r\n//         availableNumbers.delete(parseInt(mls.charAt(i)))\r\n//     }\r\n//     // console.log(`Available Squares: ${availableNumbers}`)\r\n//     return Array.from(availableNumbers)\r\n// }\r\nexport function getParent(ml) {\r\n    return ml.slice(0, ml.length - 1)\r\n}\r\n\r\n////////////////////////////////////////////////////////////////\r\n// Opening Book\r\n////////////////////////////////////////////////////////////////\r\n// function getOpeningBookMove(ml) {\r\n//     console.assert(ml.length < 2)\r\n//     console.log(`BOT MAKING AN OPENING BOOK MOVE.`)\r\n\r\n//     if (ml.length === 0) {\r\n//         return selectMoveRandomly(availableNumbers(ml))\r\n//     }\r\n//     else if (ml[0] === 5) {\r\n//         return selectMoveRandomly([2, 4, 6, 8])\r\n//     }\r\n//     else if (ml[0] % 2 === 0) {  // If player took a corner, bot must take center.\r\n//         return [5]\r\n//     }\r\n//     else {\r\n//         return selectMoveRandomly(blockingMoves(ml))\r\n//     }\r\n// }","import React from 'react';\r\n\r\n// Custom Components\r\n\r\n// MUI Components\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n// MUI Icons\r\n\r\n// Custom Styling\r\nimport '../../styles/App.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n        color: theme.palette.common.white,\r\n        backgroundColor: theme.palette.primary.main,\r\n        width: '100%',\r\n        height: '2.1rem',\r\n        fontSize: '1rem',\r\n    },\r\n    selectedButton: {\r\n        color: theme.palette.common.white,\r\n        backgroundColor: 'rgba(46, 107, 18, 1.0)',\r\n    },\r\n    unselectedButton: {\r\n        color: '#999999',\r\n        backgroundColor: 'rgba(46, 107, 18, 0.5)',\r\n    },\r\n    \r\n}));\r\n\r\nexport default function DifficultyModeButtons(props) {\r\n    const classes = useStyles();\r\n\r\n    let easyButton = (\r\n        <Button\r\n            className={`${classes.button} ${props.difficultyMode === \"easy\" ? classes.selectedButton : classes.unselectedButton} `}\r\n            variant={'contained'}\r\n            onClick={() => props.handleDifficultyModeChange(\"easy\")}\r\n        >\r\n            Easy\r\n        </Button>\r\n    )\r\n\r\n    let mediumButton = (\r\n        <Button\r\n            className={`${classes.button} ${props.difficultyMode === \"medium\" ? classes.selectedButton : classes.unselectedButton} `}\r\n            variant={'contained'}\r\n            onClick={() => props.handleDifficultyModeChange(\"medium\")}\r\n        >\r\n            Medium\r\n        </Button>\r\n    )\r\n\r\n    let hardButton = (\r\n        <Button\r\n            className={`${classes.button} ${props.difficultyMode === \"hard\" ? classes.selectedButton : classes.unselectedButton} `}\r\n            variant={'contained'}\r\n            onClick={() => props.handleDifficultyModeChange(\"hard\")}\r\n        >\r\n            Hard\r\n        </Button>\r\n    )\r\n\r\n\r\n    return (\r\n        <Grid container spacing={3} >\r\n            <Grid item xs={4}  >\r\n                {easyButton}\r\n            </Grid>\r\n            <Grid item xs={4}  >\r\n                {mediumButton}\r\n            </Grid>\r\n            <Grid item xs={4}  >\r\n                {hardButton}\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\n// Custom Components\r\n\r\n// MUI Components\r\nimport Button from '@material-ui/core/Button';\r\n\r\n// MUI Icons\r\n\r\n// Custom Styling\r\nimport '../../styles/App.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n        color: theme.palette.common.white,\r\n        backgroundColor: theme.palette.primary.main,\r\n        width: '100%',\r\n        height: '2.1rem',\r\n        fontSize: '1rem',\r\n    },\r\n}));\r\n\r\nexport default function DifficultyModeButtons(props) {\r\n    const classes = useStyles();\r\n    \r\n    return (\r\n        <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.button}\r\n            onClick={() => props.handleBotGoFirstClick()}\r\n            disabled={props.moveList.length !== 0}\r\n        >\r\n            Let&nbsp;Bot&nbsp;Go&nbsp;First\r\n        </Button>\r\n    )\r\n\r\n}\r\n","import React from 'react';\r\n\r\n// Custom Components\r\nimport GameNumber from '../../components/Panels/Parts/GameNumber'\r\nimport StatusHeader from '../../components/Panels/Parts/StatusHeader'\r\nimport TicTacToeRecord from '../../components/Panels/Parts/TicTacToeRecord'\r\nimport FifteenRecord from '../../components/Panels/Parts/FifteenRecord'\r\n\r\n\r\nimport DifficultyModeButtons from \"../../components/Buttons/DifficultyModeButtons\";\r\nimport NewGameButton from '../../components/Buttons/NewGameButton'\r\nimport BotGoFirstButton from '../../components/Buttons/BotGoFirstButton'\r\n \r\n// MUI Components\r\nimport { Box, Grid, Container } from '@material-ui/core';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    panel: {\r\n        // border: 'solid orange 1px',\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        padding: '0rem 0.5rem'\r\n    },\r\n    infoArea: {\r\n        // border: 'solid red 1px',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        padding: '1rem 0rem 2rem',\r\n    },\r\n    controls: {\r\n        // border: 'solid green 1px',\r\n    },\r\n    \r\n}));\r\n\r\nexport default function BotPanel(props) {\r\n    const classes = useStyles();\r\n\r\n    function gameOver(s = props.status) {\r\n        return (s === \"xWins\" || s === \"oWins\" || s === \"draw\")\r\n    }\r\n\r\n    let record = (props.game === \"tic-tac-toe\") ?\r\n        <TicTacToeRecord\r\n            playMode=\"humanVsBot\"\r\n            humanGoesFirst={props.humanGoesFirst}\r\n            record={props.record}\r\n            status={props.status}\r\n        /> :\r\n        <FifteenRecord\r\n            playMode=\"humanVsBot\"\r\n            humanGoesFirst={props.humanGoesFirst}\r\n            record={props.record}\r\n            status={props.status}\r\n        />\r\n    \r\n    return (\r\n        <Container maxWidth='sm' className={classes.panel} >\r\n            <Box className={classes.infoArea} >\r\n                <Box display=\"flex\" justifyContent=\"center\" color=\"textPrimary\"  >\r\n                    <GameNumber \r\n                        status={props.status}\r\n                        gameNumber={props.gameNumber}\r\n                    />&nbsp;&nbsp;&nbsp;\r\n                    <StatusHeader \r\n                        game={props.game}\r\n                        moveList={props.moveList}\r\n                        humanGoesFirst={props.humanGoesFirst}\r\n                    />\r\n                </Box>\r\n                {record}\r\n            </Box>\r\n            <Grid container spacing={2} className={classes.controls} >\r\n                <Grid item xs={12}  >\r\n                    <DifficultyModeButtons \r\n                        difficultyMode={props.difficultyMode}\r\n                        handleDifficultyModeChange={props.handleDifficultyModeChange}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={6}   >\r\n                    <NewGameButton\r\n                        gameOver={gameOver(props.status)}\r\n                        handleNewGameClick={props.handleNewGameClick}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={6}    >\r\n                    <BotGoFirstButton \r\n                        gameOver={false}\r\n                        moveList={props.moveList}\r\n                        handleBotGoFirstClick={props.handleBotGoFirstClick}\r\n                    />\r\n                </Grid>\r\n\r\n\r\n            </Grid>\r\n        </Container>\r\n    )\r\n\r\n    \r\n\r\n}\r\n\r\n\r\n","import React, { useState } from 'react';\r\n\r\n// My Logical Components\r\n// import positionToOutcomeMap from \"../pages/positionToOutcomeMap\";\r\nimport { status, gameOver, nextPlayer, availableNumbers } from \"../logic/GameLogic\";\r\nimport { selectMoveRandomly, winningMoves, urgentDefensiveMoves, sortBotMoves } from \"../logic/BotLogic\";\r\n\r\n// My React Components\r\nimport Navbar from \"../components/Navbar/Navbar\"\r\nimport TicTacToeBoard from \"../components/Boards/TicTacToeBoard\";\r\nimport FifteenBoard from \"../components/Boards/FifteenBoard\"\r\nimport BotPanel from \"../components/Panels/BotPanel\";\r\n\r\n// MUI  components\r\nimport Box from '@material-ui/core/Box';\r\n\r\n// Custom Styling\r\nimport '../styles/TicTacToe.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '97%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    navbarArea: {\r\n        // border: 'solid blue 1px',\r\n        width: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        flex: '1 0 5vh',\r\n    },\r\n    boardArea: {\r\n        // border: 'solid green 1px',\r\n        display: 'flex',\r\n        flex: '1 0 50vh',\r\n        justifyContent: 'center',\r\n    },\r\n    panelArea: {\r\n        // border: 'solid red 1px',\r\n        color: theme.palette.common.white,\r\n        backgroundColor: theme.palette.common.black,\r\n        display: 'flex',\r\n        flex: '1 0 45vh',\r\n    },\r\n}));\r\n\r\n// In Play With Coach mode X always goes first\r\n\r\nexport default function PlayVsBot(props) {\r\n    const classes = useStyles();\r\n\r\n    // const xGoesFirst = true  // X always goes first\r\n    let [humanGoesFirst, setHumanGoesFirst] = useState(true);\r\n    \r\n    let startingPosition = \"\"  // vs []\r\n    let [moveList, setMoveList] = useState(startingPosition);\r\n\r\n    let [gameNumber, setGameNumber] = useState(1);\r\n    let [record, setRecord] = useState([0, 0, 0]);\r\n\r\n    let [difficultyMode, setDifficultyMode] = useState(\"hard\") // In \"hard\" mode my bot never makes a mistake.\r\n\r\n    console.assert(props.game === \"tic-tac-toe\" || props.game === \"fifteen-game\")\r\n    let board = (props.game === \"tic-tac-toe\") ?\r\n        <TicTacToeBoard\r\n            moveList={moveList}\r\n            handleBoardClick={handleBoardClick}\r\n            showHints={false}\r\n        /> :\r\n        <FifteenBoard\r\n            moveList={moveList}\r\n            handleBoardClick={handleBoardClick}\r\n            showHints={false}\r\n        />\r\n    \r\n    \r\n    return (\r\n        <Box className={classes.root} >\r\n            <Box className={classes.navbarArea}>\r\n                <Navbar pageTitle={(props.game === \"tic-tac-toe\") ? \"Tic Tac Toe vs. Bot\" : \"15 Game vs. Bot\"} />\r\n            </Box>\r\n            <Box className={classes.boardArea}>\r\n                {board}\r\n            </Box>\r\n            <Box className={classes.panelArea}>\r\n                <BotPanel\r\n                    game={props.game}\r\n                    gameNumber={gameNumber}\r\n                    status={status(moveList)}\r\n                    moveList={moveList}\r\n                    record={record}\r\n                    difficultyMode={difficultyMode}\r\n                    humanGoesFirst={humanGoesFirst}\r\n                    handleNewGameClick={handleNewGameClick}\r\n                    handleBotGoFirstClick={handleBotGoFirstClick}\r\n                    handleDifficultyModeChange={handleDifficultyModeChange}\r\n                />\r\n            </Box>\r\n        </Box>\r\n    )\r\n\r\n    \r\n    function humanGoesNext(mls) {  \r\n        if (humanGoesFirst) {\r\n            return (nextPlayer(mls) === \"xNext\")\r\n        } \r\n        else {\r\n            return (nextPlayer(mls) === \"oNext\")\r\n        }\r\n    }\r\n    \r\n\r\n    // CLICK HANDLERS\r\n    function handleBoardClick(num) {\r\n        if (!humanGoesNext(moveList)) {\r\n            console.warn(\"NO EFFECT. Be patient, the bot takes a second to move. \")\r\n            return 1\r\n        }\r\n        else if (moveList.includes(num)) {\r\n            console.warn(\"NO EFFECT. That number has already been claimed.\")\r\n            return 1\r\n        }\r\n        else if (gameOver(moveList)) {\r\n            console.warn(\"NO EFFECT. The Game is already over.\")\r\n            return 1\r\n        }\r\n        else {\r\n            let updatedMoveList = moveList.concat(num)\r\n            // console.log(`updatedMoveList: ${updatedMoveList} `)\r\n            setMoveList(updatedMoveList)\r\n            if (gameOver(updatedMoveList)) {\r\n                handleGameOver(updatedMoveList)\r\n            } else {\r\n                handleBotsTurn(updatedMoveList)\r\n            }\r\n            return 0\r\n        }\r\n    }\r\n\r\n\r\n    function handleGameOver(ml) {\r\n        // console.assert(gameIsOver(ml), `NO EFFECT. handleGameOver called but the game isn't actually over!`)\r\n        let result = status(ml)\r\n\r\n        if (result === \"draw\") {\r\n            setRecord([record[0], record[1], ++record[2]])\r\n        }\r\n        else if (result === \"xWins\") {\r\n            if (humanGoesFirst) {\r\n                setRecord([++record[0], record[1], record[2]])\r\n            }\r\n            else {\r\n                setRecord([record[0], ++record[1], record[2]])\r\n            }\r\n        }\r\n        else if (result === \"oWins\") {\r\n            if (humanGoesFirst) {\r\n                setRecord([record[0], ++record[1], record[2]])\r\n            }\r\n            else {\r\n                setRecord([++record[0], record[1], record[2]])\r\n            }\r\n        }\r\n        else {\r\n            console.error(`handleGameOver called with invalid game result: ${result}. `)\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    function handleNewGameClick() {\r\n        setGameNumber(++gameNumber)\r\n        setHumanGoesFirst(true)\r\n        setMoveList(startingPosition)\r\n    }\r\n\r\n    function handleBotGoFirstClick() {\r\n        console.assert(moveList.length === 0, `handleLetBotGoFirstClick was called but it is not the frst move of the game!`)\r\n        setHumanGoesFirst(false)\r\n        handleBotsTurn('') // if the bot is going first the movelist is empty.\r\n    }\r\n\r\n    function handleDifficultyModeChange(newDifficulty) {\r\n        setGameNumber(1)\r\n        setHumanGoesFirst(true)\r\n        setRecord([0, 0, 0])\r\n        setMoveList(startingPosition)\r\n        setDifficultyMode(newDifficulty)\r\n    }\r\n\r\n\r\n    // Find and make a move for the Bot with a slight delay. \r\n    function handleBotsTurn(ml = moveList) {\r\n        let botMove = getBotMove(ml)\r\n        let updatedMoveList = ml.concat(botMove)\r\n        setTimeout(() => {\r\n            setMoveList(updatedMoveList)\r\n            if (gameOver(updatedMoveList)) {\r\n                console.log(\"Don't let player move again. Call handleGameOver instead.\")\r\n                handleGameOver(updatedMoveList)\r\n                return 1\r\n            }\r\n        }, 800)\r\n    }\r\n\r\n    //////////////////////////////////////////////////////////////     \r\n    //  GET  BOT  MOVE  PROTOCOLS\r\n    ////////////////////////////////////////////////////////////// \r\n\r\n    function getBotMove(ml = moveList) {\r\n        if (difficultyMode === \"easy\") {\r\n            return easyProtocol(ml)\r\n        }\r\n        else if (difficultyMode === \"medium\") {\r\n            return mediumProtocol(ml)\r\n        }\r\n        else if (difficultyMode === \"hard\") {\r\n            return hardProtocol(ml)\r\n        }\r\n        else {\r\n            console.error(`getBotMove called with invalid difficulty mode!!!`)\r\n        }\r\n    }\r\n\r\n    // In EASY mode: Bot wins immediately if it can and otherwise selects a random move. \r\n    function easyProtocol(ml) {\r\n        if (winningMoves(ml).length > 0) {\r\n            console.log(`BOT FOUND IMMEDIEATELY WINNING MOVES: ${winningMoves(ml)}`)\r\n            return selectMoveRandomly(winningMoves(ml))\r\n        }\r\n        else {\r\n            return selectMoveRandomly(availableNumbers(ml))\r\n        }\r\n    }\r\n\r\n    // In MEDIUM mode, Bot wins immediately if possible.\r\n    // In MEDIUM mode, Bot blocks any immediate threats but does not look any further ahead. \r\n    function mediumProtocol(ml) {\r\n        let wins = winningMoves(ml)\r\n        let defensiveMoves = urgentDefensiveMoves(ml)\r\n        if (wins.length > 0) {\r\n            console.log(`BOT FOUND IMMEDIATELY WINNING MOVES: ${wins}`)\r\n            return selectMoveRandomly(wins)\r\n        }\r\n        else if (defensiveMoves.length > 0) {\r\n            console.log(`BOT FOUND URGENT DEFENSIVE MOVES: ${defensiveMoves}`)\r\n            return selectMoveRandomly(defensiveMoves)\r\n        }\r\n        else {\r\n            return selectMoveRandomly(availableNumbers(ml))\r\n        }\r\n    }\r\n\r\n    // In HARD mode Bot looks for forcing moves that will allow it to make double attacks on its next move.\r\n    // In HARD mode Bot avoids letting Player make forcing moves that will lead to double attacks.\r\n    function hardProtocol(ml) {\r\n        console.log(`Outcome Graph Hard Protocol called for move list: [${ml}]`)\r\n        console.time('getHardFromGraph')\r\n        let sorted = sortBotMoves(ml, humanGoesFirst)\r\n        // console.log(`BOT SORTED its choices from position [${ml}]:`)\r\n        // console.log(`Bot found these Winning Moves: ${sorted.winningForBot}`)  \r\n        // console.log(`Bot found these Drawing Moves: ${sorted.drawing}`)\r\n        // console.log(`Bot found these Losing Moves: ${sorted.winningForHuman}`)\r\n        if (sorted.winningForBot.length > 0) {\r\n            return selectMoveRandomly(sorted.winningForBot)\r\n        }\r\n        else if (sorted.drawing.length > 0) {\r\n            return selectMoveRandomly(sorted.drawing)\r\n        }\r\n        else {\r\n            console.error(`Bot Found NEITHER Winning NOR Drawing Moves!!! Picking from Losing Moves: ${sorted.winningForHuman} `)\r\n            return selectMoveRandomly(sorted.winningForHuman)    \r\n        }\r\n    }\r\n    // function hardProtocolWithShortcuts(ml) {\r\n    //     console.log(`Hard Protocol called for move list: [${ml}]`)\r\n    //     if (ml.length <= 1) {\r\n    //         return getOpeningBookMove(ml)\r\n    //     }\r\n    //     let wins = winningMoves(ml)\r\n    //     let blocks = urgentDefensiveMoves(ml)\r\n\r\n    //     if (wins.length > 0) {\r\n    //         return selectMoveRandomly(wins)\r\n    //     }\r\n    //     else if (blocks.length > 0) {\r\n    //         return selectMoveRandomly(blocks)\r\n    //     }\r\n\r\n    //     else {\r\n\r\n\r\n    //     }\r\n    // }\r\n}\r\n\r\n","import React from 'react';\r\n\r\nimport { nextPlayer } from \"../../../logic/GameLogic\";\r\n\r\n// My Components\r\n\r\n// MUI  components\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\n// Custom Styling\r\n// import '../../styles/TicTacToe.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    commetaryBox: {\r\n        color: theme.palette.common.white,\r\n        width: '100%',\r\n    },\r\n}));\r\n\r\nexport default function CoachsCommentary(props) {\r\n    const classes = useStyles();\r\n\r\n    let moveList = props.moveList\r\n    let commentLabel = props.commentLabel\r\n\r\n    let next = (nextPlayer(moveList) === \"xNext\") ? \"X\" : \"O\"\r\n    let prev = (nextPlayer(moveList) === \"xNext\") ? \"O\" : \"X\"\r\n\r\n    return (\r\n        <Box className={classes.commetaryBox} >\r\n            <Typography align='justify' component='p' variant='body1' gutterBottom>\r\n                {getCommentary(commentLabel, next)}\r\n            </Typography>\r\n        </Box>\r\n    )\r\n\r\n    function getCommentary(commentLabel, next) {\r\n        console.log(`getCommentary called with commentLabel: ${commentLabel}`);\r\n        \r\n        let comment = `Error in get commentary.  Called with commentLabel: ${commentLabel}`\r\n        switch (commentLabel) {\r\n            case \"newGame\":\r\n                comment = `New Game. X always goes first. It may look like X has 9 different \r\n                options but, considering symmetry, there are really only 3: Center, Edge, or Corner. \r\n                Do any of them set X up to force a win? Is there any move for X that would be a 'mistake'?`\r\n                break;\r\n            case \"centerOpening\":\r\n                comment = `The Center Opening is the most popular. I think this is because there are more three-in-a-rows that\r\n                include the center square than the edges and corners. Though X is still on track for a draw, the center opening\r\n                is the easiest for O to defend against because, considering symmetry, O really only has two options, edge or corner.\r\n                One is good and keeps O on track for a draw. The other is bad and opens the door for X to force a win.`\r\n                break;\r\n            case \"cornerOpening\":\r\n                comment = `The Corner Opening can lead X to a winning double attack if O makes a mistake on their first move. \r\n                O has 5 non-symetrical options in this position, however, the only sound move that O has in this position is also the most\r\n                intuitive one. Proove this to yourself by going through O's 4 losing options and finding a plan that guarantees X \r\n                a victory in each one.`\r\n                break;\r\n            case \"edgeOpening\":\r\n                comment = `The Edge Opening is my personal favorite. It is the least commonly played and is the most complex to analyze.\r\n                There are many tricks and traps in this opening that both players can take advantage of!\r\n                O has five non-symmetrical options. Don't settle for just finding one move that lets O guarantee a draw,\r\n                dig into each of the five options and find the ones that maximize the chances X will make a mistake!`\r\n                break;\r\n            case \"immediateWin\":\r\n                comment = `${next} goes next and has the ability to win immediately! That means ${prev} must have made a mistake \r\n                earlier in the game. Go back and see if you can find the mistake and choose the better option instead.`\r\n                break;\r\n            case \"urgentDefence\":\r\n                comment = `${next} goes next and has an urgent defensive move they must make in order to not lose on the next turn!`\r\n                break;\r\n            case \"losing\":\r\n                comment = `${next} goes next, has no immediate way to win and ${prev} has more than one threat, meaning ${next} cannot \r\n                defend against them all. Defeat is on its way no matter what ${next} does now. This move is not the mistake though! \r\n                Go back and find the mistake that allowed ${prev} to create this double attack.`\r\n                break;\r\n            case \"doubleAttack\":\r\n                comment = `Though ${next} cannot win this turn, they can create a double attack, setting up for a\r\n                guaranteed win on their next turn no matter what ${prev} does. Don't settle for a move that only creates \r\n                one threat, you need to make two simultaneous threats in order to win.`\r\n                break;\r\n            case \"mistake\":\r\n                comment = `A mistake! Before that last move ${prev} was on track for a draw. That last move  \r\n                has given ${next} the opportunity to force a win. ${next} cannot create a double attack quite yet, so they will\r\n                have to look further into the future to see what forced continuations can lead them to making a double attack on\r\n                their next move. Don't settle for a draw anymore! Make the most of your opponent's mistake.`\r\n                break;\r\n            case \"missedWin\":\r\n                comment = `${next} made the first mistake and gave ${prev} a chance to force a win, but ${prev} replied with\r\n                another mistake and now they have missed missed that chance to win! Look for forcing moves that lead to double\r\n                attacks and you will avoid mistakes like the one ${prev} just made.`\r\n                break;\r\n            case \"sound\":\r\n                comment = `Good. The last move by ${prev} was \"sound\" meaning it has not hurt their worst case outcome: previously\r\n                on track for a draw, still on track for a draw.`\r\n                break;\r\n            case \"xWins\":\r\n                comment = `X has won the game! That means O must have made a mistake along the way.\r\n                Go back and see if you can find it on your own. If not, check the hints. In starting position, all 9 squares are Yellow, \r\n                indicating that no matter which one X chooses they will be on track for a draw. When Red squares appear in the hints these \r\n                indicate moves that would be mistakes, moves that would grant the opponent a chance to win.  When Green squares appear in \r\n                the hints these indicate moves that either win immediately or force a win in the next few moves.\r\n                Choosing a red square always a \"mistake\", but so is choosing a yellow square when you had a green option!`\r\n                break;\r\n            case \"oWins\":\r\n                comment = `O has won the game! That means X must have made a mistake along the way.\r\n                Go back and see if you can find it on your own. If not, check the hints. In starting position, all 9 squares are Yellow, \r\n                indicating that no matter which one X chooses they will be on track for a draw. When Red squares appear in the hints these \r\n                indicate moves that would be mistakes, moves that would grant the opponent a chance to win.  When Green squares appear in \r\n                the hints these indicate moves that either win immediately or force a win in the next few moves.\r\n                Choosing a red square always a \"mistake\", but so is choosing a yellow square when you had a green option!`\r\n                break;\r\n            case \"draw\":\r\n                comment = `The game has ended a draw. What did you expect? `\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return comment\r\n \r\n        \r\n\r\n        // If two moves has been made\r\n        // if (ml.length === 2) {\r\n        //     let message = '';\r\n        //     if (thereIsADistantForcedWinCreatingMove()) {\r\n        //         message = `O's first move was a mistake and now X can ensure victory! But how?`\r\n        //     }\r\n        //     else {\r\n        //         let answer = (gameLosingMoves().length > 0) ? 'Yes! So be careful.' : 'No! You\\'re safe no matter what.';\r\n        //         message = `O's first move was sound. None of X's current options ensure victory, but do any actually lose?  ${answer}`\r\n        //     }\r\n        //     return message;\r\n        // }\r\n\r\n        // If three moves have been made\r\n        // if (ml.length >= 3) {\r\n        //     let message = '';\r\n        //     if (thereIsAnImmediateWin()) {\r\n        //         message = `You have a winning move! Defensive moves are irrelevant.`\r\n        //     }\r\n        //     else if (thisIsADoubleAttack()) {\r\n        //         message = `You cannot win right now and cannot block all of your opponent's threats. Which move led you to from a draw to defeat?`\r\n        //     }\r\n        //     else if (thereIsADoubleAttackCreatingMove()) {\r\n        //         message = `You can set up a winning double attack! Don't settle for empty threats, \r\n        //         think hard and be sure that you are setting yourself up to win no matter what!`\r\n        //     }\r\n        //     else if (thereIsAnUrgentDefensiveMove()) {\r\n        //         message = `You cannot win right now so you must defend the one key square.`\r\n        //     }\r\n\r\n        //     else {\r\n        //         let answer = (gameLosingMoves().length > 0) ?\r\n        //             'Nonetheless, it is possible for you to make a mistake and lose right now. Play carefully!' :\r\n        //             'You\\'re on track for a draw no matter what move you play in this position.';\r\n        //         message = `You have neither a winning attack nor an urgent defensive move. ${answer}`\r\n        //     }\r\n        //     return message;\r\n        // }\r\n\r\n    }\r\n\r\n    \r\n    \r\n}\r\n","import React from 'react';\r\n\r\n// My Components\r\n\r\n// MUI Components\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n// MUI Icons\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        width: '100%',\r\n        height: '2.1rem',\r\n        fontSize: '1rem',\r\n    },\r\n}));\r\n\r\nexport default function ShowHintsButton(props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Button\r\n            className={classes.button}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => props.toggleShowHints()}\r\n        >\r\n            <Box mr={2} display=\"flex\" alignContent=\"center\" >\r\n                <HelpOutlineIcon />\r\n            </Box>\r\n            {props.showHints ? \"Hide Hints\" : \"Show Hints\"}\r\n        </Button>\r\n    )\r\n}\r\n    \r\n\r\n    \r\n\r\n","import React from 'react';\r\n\r\nimport { status, outcomeMap, getParent } from \"../../logic/GameLogic\";\r\nimport { winningMoves, urgentDefensiveMoves, doubleAttackingMoves } from \"../../logic/BotLogic\";\r\n\r\n\r\n// Custom Components\r\nimport StatusHeader from './Parts/StatusHeader';\r\nimport CoachsCommentary from \"./Parts/CoachsCommentary\";\r\n\r\nimport UndoButton from \"../Buttons/UndoButton\";\r\nimport ShowHintsButton from \"../Buttons/ShowHintsButton\";\r\n\r\n// MUI Components\r\nimport Box from '@material-ui/core/Box';\r\nimport Container from '@material-ui/core/Container';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid } from '@material-ui/core';\r\nconst useStyles = makeStyles((theme) => ({\r\n    panel: {\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    infoArea: {\r\n        flex: '1 0 60%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    buttonArea: {\r\n        flex: '1 0 20%',\r\n        display: 'flex',\r\n    },\r\n}));\r\n\r\nexport default function CoachPanel(props) {\r\n    const classes = useStyles();\r\n\r\n    function getCommentLabel(mls) {\r\n        // console.log(`getCommentLabel called with moveList: ${mls}`);\r\n        let currentStatus = status(mls)\r\n        let currentOutcome = outcomeMap.get(mls)\r\n        let previousOutcome = outcomeMap.get(getParent(mls));\r\n        // console.log(`Current Outcome ${currentOutcome}`);\r\n        // console.log(`Previous Outcome ${previousOutcome}`);\r\n        let label = \"error\"\r\n        if (mls.length === 0) {\r\n            label = \"newGame\"\r\n        }\r\n        else if (currentStatus === \"xWins\") {\r\n            label = \"xWins\"\r\n        }\r\n        else if (currentStatus === \"oWins\") {\r\n            label = \"oWins\"\r\n        }\r\n        else if (currentStatus === \"draw\") {\r\n            label = \"draw\"\r\n        }\r\n        else if (mls.length === 1) {\r\n            if (mls.charAt(0) === \"5\") {\r\n                label = \"centerOpening\"\r\n            }\r\n            else if (Number(mls.charAt(0)) % 2 === 0) {\r\n                label = \"cornerOpening\"\r\n            }\r\n            else {\r\n                label = \"edgeOpening\"\r\n            }\r\n        } \r\n        else if (winningMoves(mls).length > 0 ) {\r\n            label = \"immediateWin\"\r\n        }\r\n        else if (urgentDefensiveMoves(mls).length === 1) {          //  Modify this to pre and postpend  \"A Mistake!\" and \"Not all moves are good in this position, choose carefully!\"\r\n            label = \"urgentDefence\"\r\n        }\r\n        else if (urgentDefensiveMoves(mls).length === 2) {\r\n            label = \"losing\"\r\n        }\r\n        else if (doubleAttackingMoves(mls).length > 0) {\r\n            label = \"doubleAttack\"\r\n        }\r\n        else if (previousOutcome === \"draw\" && currentOutcome === \"draw\") {\r\n            label = \"sound\"\r\n        }\r\n        else if (previousOutcome === \"draw\" && (currentOutcome === \"xWins\" || currentOutcome === \"oWins\")) {\r\n            label = \"mistake\"\r\n        }\r\n        else if (currentOutcome === \"draw\" && (previousOutcome === \"xWins\" || previousOutcome === \"oWins\")) {\r\n            label = \"missedWin\"\r\n        }\r\n        return label\r\n    }\r\n    let commentLabel = getCommentLabel(props.moveList)\r\n\r\n    return (\r\n        <Container maxWidth='sm' className={classes.panel} >\r\n            <Box className={classes.infoArea} >\r\n                <StatusHeader\r\n                    moveList={props.moveList}\r\n                />\r\n                <CoachsCommentary\r\n                    moveList={props.moveList}\r\n                    commentLabel={commentLabel}\r\n                /> \r\n            </Box>\r\n            <Grid container spacing={2} className={classes.buttonArea} >\r\n                <Grid item xs={7}   >\r\n                    <ShowHintsButton \r\n                        showHints={props.showHints}\r\n                        toggleShowHints={props.toggleShowHints}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={5}  >\r\n                    <UndoButton\r\n                        gameOver={false}\r\n                        moveList={props.moveList}\r\n                        handleUndoClick={props.handleUndoClick}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\n","import React, { useState } from 'react';\r\n\r\n// My Logical Components\r\n// import positionToOutcomeMap from \"../pages/positionToOutcomeMap\";\r\nimport { gameOver } from \"../logic/GameLogic\";\r\n\r\n// My React Components\r\nimport Navbar from \"../components/Navbar/Navbar\"\r\nimport TicTacToeBoard from \"../components/Boards/TicTacToeBoard\";\r\nimport CoachPanel from \"../components/Panels/CoachPanel\";\r\n\r\n// MUI  components\r\nimport Box from '@material-ui/core/Box';\r\n\r\n// Custom Styling\r\nimport '../styles/TicTacToe.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100vh',\r\n        overflowY: 'hidden',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    navbarArea: {\r\n        // border: 'solid blue 1px',\r\n        width: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        flex: '0 0 5vh',\r\n    },\r\n    boardArea: {\r\n        // border: 'solid green 1px',\r\n        display: 'flex',\r\n        flex: '0 0 50vh',\r\n        justifyContent: 'center',\r\n        paddingTop: '0.5rem'\r\n    },\r\n    panelArea: {\r\n        // border: 'solid red 1px',\r\n        color: theme.palette.common.white,\r\n        backgroundColor: theme.palette.common.black,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        flex: '1 0 30vh',\r\n    },\r\n}));\r\n\r\n// In Play With Coach mode X always goes first\r\n\r\nexport default function PlayWithCoach(props) {\r\n    const classes = useStyles();\r\n    // const xGoesFirst = true  // X always goes first in Play with Coach Mode\r\n\r\n    let startingPosition = \"\"  // vs []\r\n    let [moveList, setmoveList] = useState(startingPosition);\r\n\r\n    let [showHints, setShowHints] = useState(false);\r\n    // let [showHints, setShowHints] = useState(true);\r\n\r\n    return (\r\n        <Box className={classes.root} >\r\n            <Box className={classes.navbarArea}>\r\n                <Navbar pageTitle=\"Tic Tac Toe Coach\" />\r\n            </Box>\r\n\r\n            <Box className={classes.boardArea}>\r\n                <TicTacToeBoard\r\n                    moveList={moveList}\r\n                    showHints={showHints}\r\n                    handleBoardClick={handleBoardClick}\r\n                />\r\n            </Box>\r\n            <Box className={classes.panelArea}>\r\n                <CoachPanel\r\n                    moveList={moveList}\r\n                    showHints={showHints}\r\n                    toggleShowHints={toggleShowHints}\r\n                    handleUndoClick={handleUndoClick}\r\n                />\r\n            </Box>\r\n        </Box>\r\n    )\r\n\r\n    \r\n    // CLICK HANDLERS\r\n    function handleBoardClick(squareClicked) {\r\n        if (gameOver(moveList)) {\r\n            console.log(\"return without effects from handleSquareClick(). The Game is already over.\")\r\n            return;\r\n        }\r\n        if (moveList.includes(squareClicked)) {\r\n            console.log(\"return without effects from handleSquareClick(). That square has already been claimed.\")\r\n            return;\r\n        }\r\n        // If we reach this point the clicked square is open and the game is not over yet ... \r\n        let updatedMoveList = moveList.concat(squareClicked)\r\n        console.log(`MoveList: ${updatedMoveList}`)\r\n\r\n        setmoveList(updatedMoveList);\r\n        // This function does not pass along any of its results, it acts thru side-effects. It calls setHistory and use of that hook tells React it needs to re-render all components that depend on the state \"history\".\r\n    }\r\n    function handleUndoClick() {\r\n        const shortenedMoveList = moveList.slice(0, moveList.length - 1)\r\n        console.log(`handleUndoClick() removed ${moveList[moveList.length - 1]} . New Shortened history: ${shortenedMoveList}`);\r\n        setmoveList(shortenedMoveList);\r\n    }\r\n    // function handleNewGameClick() {\r\n    //     setmoveList(startingPosition);\r\n    // }\r\n    function toggleShowHints() {\r\n        setShowHints(!showHints)\r\n    }\r\n}\r\n","import {\r\n    createTheme,\r\n    responsiveFontSizes,\r\n} from '@material-ui/core/styles';\r\n\r\n// import purple from '@material-ui/core/colors/purple';\r\n// import green from '@material-ui/core/colors/green';\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            light: '#669944',\r\n            main: '#2e6b12',\r\n            dark: '#004000',\r\n            contrastText: '#FFFFFF'\r\n        },\r\n        secondary: {\r\n            light: '#FFFFF',\r\n            main: '#669944',\r\n            dark: '#777777',\r\n            contrastText: '#FFFFFF'\r\n        },\r\n        text: {\r\n            primary: '#FFFFFF',\r\n            secondary: '#000000'\r\n        },\r\n        action: {\r\n            disabledBackground: '#2e6b12',\r\n            disabledOpacity: '0.5'\r\n        },\r\n        playerOne: {\r\n            backgroundColor: '#C11',\r\n            text: '#000'\r\n        }, \r\n        playerTwo: {\r\n            backgroundColor: '#11C',\r\n            text: '#FFF'\r\n        }, \r\n    },\r\n    typography: {\r\n        h4: {\r\n            lineHeight: 1.0\r\n        },\r\n        h5: {\r\n            lineHeight: 1.2\r\n        }\r\n    },\r\n    status: {\r\n        danger: 'orange',\r\n    },\r\n    shape: {\r\n        borderRadius: 8,\r\n    },\r\n    spacing: 8,\r\n\r\n});\r\n\r\n\r\nexport default responsiveFontSizes(theme);\r\n\r\n","import React from 'react'\r\nimport {\r\n    HashRouter as Router,\r\n    Route,\r\n    Switch\r\n} from \"react-router-dom\"\r\n\r\nimport './styles/App.css'\r\n\r\n// My Components & Pages\r\nimport WelcomePage from \"./pages/WelcomePage\"\r\n\r\n// PLAY MODES\r\nimport TicTacToeRules from './pages/TicTacToeRules'\r\nimport FifteenRules from './pages/FifteenRules'\r\nimport PlayVsHuman from './pages/PlayVsHuman'\r\nimport PlayVsBot from './pages/PlayVsBot'\r\nimport PlayWithCoach from './pages/PlayWithCoach'\r\n// import MagicSquares from \"./pages/MagicSquares\"\r\n\r\n// MUI  components\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport Box from '@material-ui/core/Box'\r\n\r\n// THEMING\r\nimport theme from \"./theme\"\r\nimport {\r\n    makeStyles,\r\n    ThemeProvider,\r\n} from '@material-ui/core/styles'\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100vh',\r\n        width: '100vw',\r\n        backgroundColor: theme.palette.common.black,\r\n\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        // justifyContent: 'center',\r\n        // alignItems: 'stretch',\r\n        overflowY: 'scroll',\r\n        overflowX: 'hidden',\r\n\r\n    },\r\n    \r\n}))\r\n\r\n\r\nexport default function App() {\r\n    const classes = useStyles();\r\n  \r\n    return (\r\n        <React.Fragment>\r\n            <CssBaseline />\r\n            <ThemeProvider theme={theme}>\r\n                <Box className={classes.root} >\r\n                    <Router>\r\n                        <Switch>\r\n                            <Route exact path=\"/\">\r\n                                <WelcomePage />\r\n                            </Route>\r\n                            <Route path=\"/tic_tac_toe_rules\">\r\n                                <TicTacToeRules />\r\n                            </Route>\r\n                            <Route path=\"/fifteen_rules\">\r\n                                <FifteenRules />\r\n                            </Route>\r\n                            <Route path=\"/play_vs_human\">\r\n                                <PlayVsHuman game={\"tic-tac-toe\"} />\r\n                            </Route>\r\n                            <Route path=\"/play_vs_bot\">\r\n                                <PlayVsBot game={\"tic-tac-toe\"}  />\r\n                            </Route>\r\n                            <Route path=\"/play_with_coach\">\r\n                                <PlayWithCoach game={\"tic-tac-toe\"} />\r\n                            </Route>    \r\n                            <Route path=\"/fifteen_vs_human\">\r\n                                <PlayVsHuman game={\"fifteen-game\"} />\r\n                            </Route>\r\n                            <Route path=\"/fifteen_vs_bot\">\r\n                                <PlayVsBot game={\"fifteen-game\"} />\r\n                            </Route>\r\n                            {/* <Route path=\"/magic_squares\">\r\n                                <MagicSquares />\r\n                            </Route> */}\r\n                        </Switch>\r\n                    </Router>\r\n                </Box>\r\n            </ThemeProvider>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n//   <React.StrictMode>\r\n    <App />,\r\n//   </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}